[
    {
        "id": "5924433263ceb70d",
        "type": "tab",
        "label": "Gimbal Dashboard",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "f7d5cf3810421cf3",
        "type": "subflow",
        "name": "Default Pages",
        "info": "",
        "category": "Vision AI",
        "in": [],
        "out": [],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "22d80629fd354a7c",
        "type": "subflow",
        "name": "Device Info Pages",
        "info": "",
        "category": "Vision AI",
        "in": [],
        "out": [],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "b97fc673d9180980",
        "type": "sscma",
        "host": "localhost",
        "mqttport": "1883",
        "apiport": "80",
        "clientid": "recamera",
        "username": "",
        "password": ""
    },
    {
        "id": "8d2cf2d27a8855ae",
        "type": "ui-group",
        "name": "Security",
        "page": "572548c1b2a5b3e5",
        "width": "12",
        "height": "1",
        "order": 1,
        "showTitle": false,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "19fb7bf1c812bd05",
        "type": "ui-group",
        "name": "Wi-Fi",
        "page": "6191aa32100142fb",
        "width": "12",
        "height": "1",
        "order": 1,
        "showTitle": false,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "805339df2b9ba50f",
        "type": "ui-group",
        "name": "Terminal",
        "page": "93a8316dd566eca2",
        "width": "12",
        "height": "1",
        "order": 1,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "92c61ece68bb9dd5",
        "type": "ui-group",
        "name": "Power",
        "page": "5e555c40a977cf78",
        "width": "6",
        "height": "1",
        "order": 5,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "572548c1b2a5b3e5",
        "type": "ui-page",
        "name": "Security",
        "ui": "e2f7615831d73e4b",
        "path": "/security",
        "icon": "security",
        "layout": "grid",
        "theme": "f5ee49967f8103a8",
        "breakpoints": [
            {
                "name": "Default",
                "px": "0",
                "cols": "3"
            },
            {
                "name": "Tablet",
                "px": "576",
                "cols": "6"
            },
            {
                "name": "Small Desktop",
                "px": "768",
                "cols": "9"
            },
            {
                "name": "Desktop",
                "px": "1024",
                "cols": "12"
            }
        ],
        "order": 4,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "6191aa32100142fb",
        "type": "ui-page",
        "name": "Network",
        "ui": "e2f7615831d73e4b",
        "path": "/network",
        "icon": "wifi",
        "layout": "grid",
        "theme": "f5ee49967f8103a8",
        "breakpoints": [
            {
                "name": "Default",
                "px": "0",
                "cols": "3"
            },
            {
                "name": "Tablet",
                "px": "576",
                "cols": "6"
            },
            {
                "name": "Small Desktop",
                "px": "768",
                "cols": "9"
            },
            {
                "name": "Desktop",
                "px": "1024",
                "cols": "12"
            }
        ],
        "order": 2,
        "className": "",
        "visible": true,
        "disabled": false
    },
    {
        "id": "93a8316dd566eca2",
        "type": "ui-page",
        "name": "Terminal",
        "ui": "e2f7615831d73e4b",
        "path": "/terminal",
        "icon": "console",
        "layout": "grid",
        "theme": "f5ee49967f8103a8",
        "breakpoints": [
            {
                "name": "Default",
                "px": "0",
                "cols": "3"
            },
            {
                "name": "Tablet",
                "px": "576",
                "cols": "6"
            },
            {
                "name": "Small Desktop",
                "px": "768",
                "cols": "9"
            },
            {
                "name": "Desktop",
                "px": "1024",
                "cols": "12"
            }
        ],
        "order": 5,
        "className": "",
        "visible": true,
        "disabled": false
    },
    {
        "id": "7f2745813d799705",
        "type": "ui-group",
        "name": "Memory",
        "page": "5e555c40a977cf78",
        "width": "6",
        "height": "1",
        "order": 4,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "a71db265f099f44c",
        "type": "ui-group",
        "name": "Sys Info",
        "page": "5e555c40a977cf78",
        "width": "6",
        "height": "1",
        "order": 1,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "6a7d65728351652c",
        "type": "ui-group",
        "name": "Load",
        "page": "5e555c40a977cf78",
        "width": "6",
        "height": "1",
        "order": 3,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "fea0f6f907349d71",
        "type": "ui-group",
        "name": "Storage",
        "page": "5e555c40a977cf78",
        "width": "6",
        "height": "1",
        "order": 2,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "5e555c40a977cf78",
        "type": "ui-page",
        "name": "Device Info",
        "ui": "e2f7615831d73e4b",
        "path": "/Deviceinfo",
        "icon": "cog",
        "layout": "grid",
        "theme": "f5ee49967f8103a8",
        "breakpoints": [
            {
                "name": "Default",
                "px": "0",
                "cols": "3"
            },
            {
                "name": "Tablet",
                "px": "576",
                "cols": "6"
            },
            {
                "name": "Small Desktop",
                "px": "768",
                "cols": "9"
            },
            {
                "name": "Desktop",
                "px": "1024",
                "cols": "12"
            }
        ],
        "order": 3,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "e2f7615831d73e4b",
        "type": "ui-base",
        "name": "My Dashboard",
        "path": "/dashboard",
        "appIcon": "",
        "includeClientData": true,
        "acceptsClientConfig": [
            "ui-notification",
            "ui-control"
        ],
        "showPathInSidebar": false,
        "navigationStyle": "default",
        "titleBarStyle": "default",
        "showReconnectNotification": true,
        "notificationDisplayTime": 1,
        "showDisconnectNotification": true
    },
    {
        "id": "f5ee49967f8103a8",
        "type": "ui-theme",
        "name": "Default Theme",
        "colors": {
            "surface": "#ffffff",
            "primary": "#0094ce",
            "bgPage": "#eeeeee",
            "groupBg": "#ffffff",
            "groupOutline": "#cccccc"
        },
        "sizes": {
            "density": "default",
            "pagePadding": "12px",
            "groupGap": "12px",
            "groupBorderRadius": "4px",
            "widgetGap": "12px"
        }
    },
    {
        "id": "37a6e7f9304e351c",
        "type": "ui-group",
        "name": "Preview",
        "page": "194edb674718394b",
        "width": "6",
        "height": "6",
        "order": 1,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "c5fbe89b47b4f853",
        "type": "ui-group",
        "name": "Different Control Methods",
        "page": "194edb674718394b",
        "width": "6",
        "height": "1",
        "order": 2,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "1c58e9752c4bdfcb",
        "type": "can-config",
        "name": "",
        "baud": "1000000",
        "interface": "can0"
    },
    {
        "id": "194edb674718394b",
        "type": "ui-page",
        "name": "Gimbal_Preview",
        "ui": "e2f7615831d73e4b",
        "path": "/page7",
        "icon": "home",
        "layout": "grid",
        "theme": "f5ee49967f8103a8",
        "breakpoints": [
            {
                "name": "Default",
                "px": "0",
                "cols": "3"
            },
            {
                "name": "Tablet",
                "px": "576",
                "cols": "6"
            },
            {
                "name": "Small Desktop",
                "px": "768",
                "cols": "9"
            },
            {
                "name": "Desktop",
                "px": "1024",
                "cols": "12"
            }
        ],
        "order": 1,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "4d040b9fa3995f53",
        "type": "ui-template",
        "z": "f7d5cf3810421cf3",
        "group": "8d2cf2d27a8855ae",
        "page": "",
        "ui": "",
        "name": "Security",
        "order": 1,
        "width": "0",
        "height": "0",
        "head": "",
        "format": "<template>\n  <div>\n    <div id=\"iframe_block\">\n      <!-- <div v-if=\"isScaning && !iframeUrl\" class=\"skeleton_box\"></div> -->\n      <iframe id=\"iframe_recamera\"  :src=\"iframeUrl\"></iframe>\n      <!-- <div v-else>\n        No website found, please check your network connection and\n        <button @click=\"function(){location.reload()}\">Refresh</button>\n      </div> -->\n    </div>\n  </div>\n</template>\n\n<script>\n  export default {\n    data() {\n      console.log(12312);\n      function getDeviceType() {\n        const userAgent = navigator.userAgent.toLowerCase();\n        return;\n        /mobile|android|iphone|ipad|ipod|blackberry|iemobile|opera mini/.test(\n          userAgent\n        )\n          ? \"PC\"\n          : \"mobile\";\n      }\n      return {\n        ipByDevice: \"\",\n        enabledIpList: [],\n        checkAllIps: true,\n        isScaning: false,\n        scanningTimeout: 3000, // ms\n        deviceType: getDeviceType(),\n        iframeUrl: `http://${window.location.hostname}/#/security?disablelayout=1`\n      };\n    },\n    computed: {\n      // iframeUrl: function () {\n      //   if (this.isScaning) {\n      //     return;\n      //   }\n      //   const ipByDevice = this.ipByDevice;\n      //   const ipList = this.enabledIpList;\n\n      //   // 无任何可用\n      //   if (!(ipList.length > 0)) {\n      //     return ipByDevice ? this.getUrl(ipByDevice) : null;\n      //   }\n\n      //   if (ipByDevice && ipList.includes(ipByDevice)) {\n      //     return this.getUrl(ipByDevice);\n      //   }\n\n      //   return this.getUrl(ipList[0]);\n      // }\n    },\n    watch: {\n      msg: function (msg, prevMsg) {\n        try {\n          //debounce 防抖\n          if (\n            prevMsg &&\n            prevMsg.interfaces &&\n            JSON.stringify(prevMsg.interfaces) ===\n              JSON.stringify(msg.interfaces)\n          ) {\n            console.log('🙈🙈 Same msg: Skip....')\n            return;\n          }\n        } catch (e) {\n          console.log(e);\n        }\n        this.scanning(msg);\n      }\n    },\n    methods: {\n      getUrl(ipAddress) {\n        return `http://${window.location.hostname}/#/security?disablelayout=1`;\n      },\n      scanning(msg) {\n        if (!(msg && msg.interfaces)) {\n          return;\n        }\n        this.ipByDevice = this.getIpByDevice(msg.interfaces);\n        this.scaningAddreses(msg.interfaces);\n      },\n      getIpByDevice: function (addresses) {\n        const ipAddress =\n          (this.deviceType === \"PC\"\n            ? addresses[\"usb\"] || addresses[\"wlan\"]\n            : addresses[\"wlan\"] || addresses[\"usb\"]) ||\n          addresses[\"eth\"] ||\n          addresses[\"en\"];\n        if (!ipAddress) {\n          return null;\n        }\n        return ipAddress;\n      },\n\n      scaningAddreses: function (addresses) {\n        if (!addresses || this.isScaning) {\n          return;\n        }\n        console.log(\"scanning addresses\");\n        const self = this;\n        let results = [];\n        var keys = Object.keys(addresses);\n        const len = keys.length;\n        self.isScaning = true;\n\n        let fn = (i) => {\n          if (\n            i >= len ||\n            (!self.checkAllIps && self.enabledIpList.length > 0)\n          ) {\n            self.isScaning = false;\n            self.enabledIpList = results;\n            console.log(\n              `%cScaning Finished ✅\\n✨Enabled Addresses: ${self.enabledIpList.join(\n                \",\"\n              )}`,\n              \"color:#87ba32\"\n            );\n\n            fn = () => {};\n            return;\n          }\n          let src = self.getUrl(addresses[keys[i]]);\n          const xhr = new XMLHttpRequest();\n          xhr.timeout = self.scanningTimeout;\n\n          const errorFn = () => {\n            fn(++i);\n          };\n\n          xhr.onload = function () {\n            if (xhr.status >= 200 && xhr.status < 300) {\n              results.push(addresses[keys[i]]);\n              console.log(\n                `%c✨(${i + 1}/${len})ping test Success: ${src}`,\n                \"color: #87ba32;\"\n              );\n              fn(++i);\n              return;\n            }\n            errorFn();\n          };\n\n          xhr.onerror = function () {\n            errorFn();\n            console.log(\n              `%c🚥(${i + 1}/${len}) ping test error: ${src}`,\n              \"color:red\"\n            );\n          };\n          // 定义超时回调\n          xhr.ontimeout = function () {\n            console.log(\n              `%c🚥(${i + 1}/${len}) ping test timeout: ${src}`,\n              \"color:red;\"\n            );\n            errorFn();\n          };\n\n          console.log(\n            `%c🚥(${i + 1}/${len}) start ping test: ${src}`,\n            \"color: #d8eeff;\"\n          );\n          xhr.open(\"GET\", src, true);\n          // 发送请求\n          xhr.send();\n        };\n        fn(0);\n      },\n\n      // 获取所有可用IP\n      getIpAddresses: function (interfaces) {\n        const reg = /^(wlan|usb|eth|en)/;\n        const addresses = {};\n        for (let iface in interfaces) {\n          for (let i = 0; i < interfaces[iface].length; i++) {\n            let address = interfaces[iface][i];\n            /* Ipv4 & 排除内部接口 & 匹配当前优先级的网口名称 */\n            var matches = iface.match(reg);\n            if (\n              matches &&\n              matches[1] &&\n              address.family === \"IPv4\" &&\n              !address.internal\n            ) {\n              addresses[matches[1]] = address.address;\n            }\n          }\n        }\n        return addresses;\n      }\n    },\n    mounted() {\n      this.scanning(this.msg);\n    }\n  };\n</script>\n<style>\n  body,\n  html {\n    overflow: hidden;\n    margin: 0 0 0 0;\n    padding: 0 0 0 0;\n  }\n\n  #iframe_block {\n    overflow: auto;\n    margin: 0 0 0 0;\n    padding: 0 0 0 0;\n    box-sizing: border-box;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    min-height: 500px;\n    z-index: 10000;\n    background-color: #eee;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n  }\n\n  #iframe_block iframe {\n    width: 100%;\n    height: 100%;\n    border: 0;\n    margin: 0 0 0 0;\n    padding: 0 0 0 0;\n    box-sizing: border-box;\n  }\n\n  .skeleton_box {\n    width: 50%;\n    height: 50%;\n    background: #e0e0e0;\n    border-radius: 20px;\n    position: relative;\n    overflow: hidden;\n  }\n\n  .skeleton_box::after {\n    content: \"\";\n    position: absolute;\n    top: 0;\n    left: -100%;\n    width: 100%;\n    height: 100%;\n    background: linear-gradient(90deg,\n        rgba(255, 255, 255, 0) 0%,\n        rgba(255, 255, 255, 0.5) 50%,\n        rgba(255, 255, 255, 0) 100%);\n    animation: shimmer 1.5s infinite;\n  }\n\n  @keyframes shimmer {\n    0% {\n      left: -100%;\n    }\n\n    100% {\n      left: 100%;\n    }\n  }\n\n</style>",
        "storeOutMessages": true,
        "passthru": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 600,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "09137b52dd5df373",
        "type": "ui-template",
        "z": "f7d5cf3810421cf3",
        "group": "19fb7bf1c812bd05",
        "page": "",
        "ui": "",
        "name": "Network",
        "order": 1,
        "width": "12",
        "height": "12",
        "head": "",
        "format": "<template>\n  <div>\n    <div id=\"iframe_block\">\n      <!-- <div v-if=\"isScaning && !iframeUrl\" class=\"skeleton_box\"></div> -->\n      <iframe id=\"iframe_recamera\" :src=\"iframeUrl\"></iframe>\n      <!-- <div v-else>\n        No website found, please check your network connection and\n        <button @click=\"function(){location.reload()}\">Refresh</button>\n      </div> -->\n    </div>\n  </div>\n</template>\n\n<script>\n  export default {\n    data() {\n      console.log(12312);\n      function getDeviceType() {\n        const userAgent = navigator.userAgent.toLowerCase();\n        return;\n        /mobile|android|iphone|ipad|ipod|blackberry|iemobile|opera mini/.test(\n          userAgent\n        )\n          ? \"PC\"\n          : \"mobile\";\n      }\n      return {\n        ipByDevice: \"\",\n        enabledIpList: [],\n        checkAllIps: true,\n        isScaning: false,\n        scanningTimeout: 3000, // ms\n        deviceType: getDeviceType(),\n        iframeUrl: `http://${window.location.hostname}/#/network?disablelayout=1`\n      };\n    },\n    computed: {\n      // iframeUrl: function () {\n      //   if (this.isScaning) {\n      //     return;\n      //   }\n      //   const ipByDevice = this.ipByDevice;\n      //   const ipList = this.enabledIpList;\n\n      //   // 无任何可用\n      //   if (!(ipList.length > 0)) {\n      //     return ipByDevice ? this.getUrl(ipByDevice) : null;\n      //   }\n\n      //   if (ipByDevice && ipList.includes(ipByDevice)) {\n      //     return this.getUrl(ipByDevice);\n      //   }\n\n      //   return this.getUrl(ipList[0]);\n      // }\n    },\n    watch: {\n      msg: function (msg, prevMsg) {\n        try {\n          //debounce 防抖\n          if (\n            prevMsg &&\n            prevMsg.interfaces &&\n            JSON.stringify(prevMsg.interfaces) ===\n              JSON.stringify(msg.interfaces)\n          ) {\n            console.log('🙈🙈 Same msg: Skip....')\n            return;\n          }\n        } catch (e) {\n          console.log(e);\n        }\n        this.scanning(msg);\n      }\n    },\n    methods: {\n      getUrl(ipAddress) {\n        return `http://${ipAddress}/#/network?disablelayout=1`;\n      },\n      scanning(msg) {\n        if (!(msg && msg.interfaces)) {\n          return;\n        }\n        this.ipByDevice = this.getIpByDevice(msg.interfaces);\n        this.scaningAddreses(msg.interfaces);\n        console.log(msg.interfaces, '---msg.interfaces---')\n      },\n      getIpByDevice: function (addresses) {\n        const ipAddress =\n          (this.deviceType === \"PC\"\n            ? addresses[\"usb\"] || addresses[\"wlan\"]\n            : addresses[\"wlan\"] || addresses[\"usb\"]) ||\n          addresses[\"eth\"] ||\n          addresses[\"en\"];\n        if (!ipAddress) {\n          return null;\n        }\n        return ipAddress;\n      },\n\n      scaningAddreses: function (addresses) {\n        if (!addresses || this.isScaning) {\n          return;\n        }\n        console.log(\"scanning addresses\");\n        const self = this;\n        let results = [];\n        var keys = Object.keys(addresses);\n        const len = keys.length;\n        self.isScaning = true;\n\n        let fn = (i) => {\n          if (\n            i >= len ||\n            (!self.checkAllIps && self.enabledIpList.length > 0)\n          ) {\n            self.isScaning = false;\n            self.enabledIpList = results;\n            console.log(\n              `%cScaning Finished ✅\\n✨Enabled Addresses: ${self.enabledIpList.join(\n                \",\"\n              )}`,\n              \"color:#87ba32\"\n            );\n\n            fn = () => {};\n            return;\n          }\n          let src = self.getUrl(addresses[keys[i]]);\n          const xhr = new XMLHttpRequest();\n          xhr.timeout = self.scanningTimeout;\n\n          const errorFn = () => {\n            fn(++i);\n          };\n\n          xhr.onload = function () {\n            if (xhr.status >= 200 && xhr.status < 300) {\n              results.push(addresses[keys[i]]);\n              console.log(\n                `%c✨(${i + 1}/${len})ping test Success: ${src}`,\n                \"color: #87ba32;\"\n              );\n              fn(++i);\n              return;\n            }\n            errorFn();\n          };\n\n          xhr.onerror = function () {\n            errorFn();\n            console.log(\n              `%c🚥(${i + 1}/${len}) ping test error: ${src}`,\n              \"color:red\"\n            );\n          };\n          // 定义超时回调\n          xhr.ontimeout = function () {\n            console.log(\n              `%c🚥(${i + 1}/${len}) ping test timeout: ${src}`,\n              \"color:red;\"\n            );\n            errorFn();\n          };\n\n          console.log(\n            `%c🚥(${i + 1}/${len}) start ping test: ${src}`,\n            \"color: #d8eeff;\"\n          );\n          xhr.open(\"GET\", src, true);\n          // 发送请求\n          xhr.send();\n        };\n        fn(0);\n      },\n\n      // 获取所有可用IP\n      getIpAddresses: function (interfaces) {\n        const reg = /^(wlan|usb|eth|en)/;\n        const addresses = {};\n        for (let iface in interfaces) {\n          for (let i = 0; i < interfaces[iface].length; i++) {\n            let address = interfaces[iface][i];\n            /* Ipv4 & 排除内部接口 & 匹配当前优先级的网口名称 */\n            var matches = iface.match(reg);\n            if (\n              matches &&\n              matches[1] &&\n              address.family === \"IPv4\" &&\n              !address.internal\n            ) {\n              addresses[matches[1]] = address.address;\n            }\n          }\n        }\n        return addresses;\n      }\n    },\n    mounted() {\n      this.scanning(this.msg);\n    }\n  };\n</script>\n<style>\n  body,\n  html {\n    overflow: hidden;\n    margin: 0 0 0 0;\n    padding: 0 0 0 0;\n  }\n\n  #iframe_block {\n    overflow: auto;\n    margin: 0 0 0 0;\n    padding: 0 0 0 0;\n    box-sizing: border-box;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    min-height: 500px;\n    z-index: 10000;\n    background-color: #eee;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n  }\n\n  #iframe_block iframe {\n    width: 100%;\n    height: 100%;\n    border: 0;\n    margin: 0 0 0 0;\n    padding: 0 0 0 0;\n    box-sizing: border-box;\n  }\n\n  .skeleton_box {\n    width: 50%;\n    height: 50%;\n    background: #e0e0e0;\n    border-radius: 20px;\n    position: relative;\n    overflow: hidden;\n  }\n\n  .skeleton_box::after {\n    content: \"\";\n    position: absolute;\n    top: 0;\n    left: -100%;\n    width: 100%;\n    height: 100%;\n    background: linear-gradient(90deg,\n        rgba(255, 255, 255, 0) 0%,\n        rgba(255, 255, 255, 0.5) 50%,\n        rgba(255, 255, 255, 0) 100%);\n    animation: shimmer 1.5s infinite;\n  }\n\n  @keyframes shimmer {\n    0% {\n      left: -100%;\n    }\n\n    100% {\n      left: 100%;\n    }\n  }\n</style>",
        "storeOutMessages": true,
        "passthru": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 600,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "7fcfaff22ec5f6b0",
        "type": "ui-template",
        "z": "f7d5cf3810421cf3",
        "group": "805339df2b9ba50f",
        "page": "",
        "ui": "",
        "name": "Terminal",
        "order": 1,
        "width": "12",
        "height": "12",
        "head": "",
        "format": "<template>\n  <div>\n    <div id=\"iframe_block\">\n      <!-- <div v-if=\"isScaning && !iframeUrl\" class=\"skeleton_box\"></div> -->\n      <iframe id=\"iframe_recamera\" :src=\"iframeUrl\"></iframe>\n      <!-- <div v-else>\n        No website found, please check your network connection and\n        <button @click=\"function(){location.reload()}\">Refresh</button>\n      </div> -->\n    </div>\n  </div>\n</template>\n\n<script>\n  export default {\n    data() {\n      console.log(12312);\n      function getDeviceType() {\n        const userAgent = navigator.userAgent.toLowerCase();\n        return;\n        /mobile|android|iphone|ipad|ipod|blackberry|iemobile|opera mini/.test(\n          userAgent\n        )\n          ? \"PC\"\n          : \"mobile\";\n      }\n      return {\n        ipByDevice: \"\",\n        enabledIpList: [],\n        checkAllIps: true,\n        isScaning: false,\n        scanningTimeout: 3000, // ms\n        deviceType: getDeviceType(),\n        iframeUrl: `http://${window.location.hostname}/#/terminal?disablelayout=1`\n      };\n    },\n    computed: {\n      // iframeUrl: function () {\n      //   if (this.isScaning) {\n      //     return;\n      //   }\n      //   const ipByDevice = this.ipByDevice;\n      //   const ipList = this.enabledIpList;\n\n      //   // 无任何可用\n      //   if (!(ipList.length > 0)) {\n      //     return ipByDevice ? this.getUrl(ipByDevice) : null;\n      //   }\n\n      //   if (ipByDevice && ipList.includes(ipByDevice)) {\n      //     return this.getUrl(ipByDevice);\n      //   }\n\n      //   return this.getUrl(ipList[0]);\n      // }\n    },\n    watch: {\n      msg: function (msg, prevMsg) {\n        try {\n          //debounce 防抖\n          if (\n            prevMsg &&\n            prevMsg.interfaces &&\n            JSON.stringify(prevMsg.interfaces) ===\n              JSON.stringify(msg.interfaces)\n          ) {\n            console.log('🙈🙈 Same msg: Skip....')\n            return;\n          }\n        } catch (e) {\n          console.log(e);\n        }\n        this.scanning(msg);\n      }\n    },\n    methods: {\n      getUrl(ipAddress) {\n        return `http://${ipAddress}/#/terminal?disablelayout=1`;\n      },\n      scanning(msg) {\n        if (!(msg && msg.interfaces)) {\n          return;\n        }\n        this.ipByDevice = this.getIpByDevice(msg.interfaces);\n        this.scaningAddreses(msg.interfaces);\n      },\n      getIpByDevice: function (addresses) {\n        const ipAddress =\n          (this.deviceType === \"PC\"\n            ? addresses[\"usb\"] || addresses[\"wlan\"]\n            : addresses[\"wlan\"] || addresses[\"usb\"]) ||\n          addresses[\"eth\"] ||\n          addresses[\"en\"];\n        if (!ipAddress) {\n          return null;\n        }\n        return ipAddress;\n      },\n\n      scaningAddreses: function (addresses) {\n        if (!addresses || this.isScaning) {\n          return;\n        }\n        console.log(\"scanning addresses\");\n        const self = this;\n        let results = [];\n        var keys = Object.keys(addresses);\n        const len = keys.length;\n        self.isScaning = true;\n\n        let fn = (i) => {\n          if (\n            i >= len ||\n            (!self.checkAllIps && self.enabledIpList.length > 0)\n          ) {\n            self.isScaning = false;\n            self.enabledIpList = results;\n            console.log(\n              `%cScaning Finished ✅\\n✨Enabled Addresses: ${self.enabledIpList.join(\n                \",\"\n              )}`,\n              \"color:#87ba32\"\n            );\n\n            fn = () => {};\n            return;\n          }\n          let src = self.getUrl(addresses[keys[i]]);\n          const xhr = new XMLHttpRequest();\n          xhr.timeout = self.scanningTimeout;\n\n          const errorFn = () => {\n            fn(++i);\n          };\n\n          xhr.onload = function () {\n            if (xhr.status >= 200 && xhr.status < 300) {\n              results.push(addresses[keys[i]]);\n              console.log(\n                `%c✨(${i + 1}/${len})ping test Success: ${src}`,\n                \"color: #87ba32;\"\n              );\n              fn(++i);\n              return;\n            }\n            errorFn();\n          };\n\n          xhr.onerror = function () {\n            errorFn();\n            console.log(\n              `%c🚥(${i + 1}/${len}) ping test error: ${src}`,\n              \"color:red\"\n            );\n          };\n          // 定义超时回调\n          xhr.ontimeout = function () {\n            console.log(\n              `%c🚥(${i + 1}/${len}) ping test timeout: ${src}`,\n              \"color:red;\"\n            );\n            errorFn();\n          };\n\n          console.log(\n            `%c🚥(${i + 1}/${len}) start ping test: ${src}`,\n            \"color: #d8eeff;\"\n          );\n          xhr.open(\"GET\", src, true);\n          // 发送请求\n          xhr.send();\n        };\n        fn(0);\n      },\n\n      // 获取所有可用IP\n      getIpAddresses: function (interfaces) {\n        const reg = /^(wlan|usb|eth|en)/;\n        const addresses = {};\n        for (let iface in interfaces) {\n          for (let i = 0; i < interfaces[iface].length; i++) {\n            let address = interfaces[iface][i];\n            /* Ipv4 & 排除内部接口 & 匹配当前优先级的网口名称 */\n            var matches = iface.match(reg);\n            if (\n              matches &&\n              matches[1] &&\n              address.family === \"IPv4\" &&\n              !address.internal\n            ) {\n              addresses[matches[1]] = address.address;\n            }\n          }\n        }\n        return addresses;\n      }\n    },\n    mounted() {\n      this.scanning(this.msg);\n    }\n  };\n</script>\n<style>\n  body,\n  html {\n    overflow: hidden;\n    margin: 0 0 0 0;\n    padding: 0 0 0 0;\n  }\n\n  #iframe_block {\n    overflow: auto;\n    margin: 0 0 0 0;\n    padding: 0 0 0 0;\n    box-sizing: border-box;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    min-height: 500px;\n    z-index: 10000;\n    background-color: #eee;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n  }\n\n  #iframe_block iframe {\n    width: 100%;\n    height: 100%;\n    border: 0;\n    margin: 0 0 0 0;\n    padding: 0 0 0 0;\n    box-sizing: border-box;\n  }\n\n  .skeleton_box {\n    width: 50%;\n    height: 50%;\n    background: #e0e0e0;\n    border-radius: 20px;\n    position: relative;\n    overflow: hidden;\n  }\n\n  .skeleton_box::after {\n    content: \"\";\n    position: absolute;\n    top: 0;\n    left: -100%;\n    width: 100%;\n    height: 100%;\n    background: linear-gradient(90deg,\n        rgba(255, 255, 255, 0) 0%,\n        rgba(255, 255, 255, 0.5) 50%,\n        rgba(255, 255, 255, 0) 100%);\n    animation: shimmer 1.5s infinite;\n  }\n\n  @keyframes shimmer {\n    0% {\n      left: -100%;\n    }\n\n    100% {\n      left: 100%;\n    }\n  }\n</style>",
        "storeOutMessages": true,
        "passthru": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 600,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "dd6f8c079532cbd0",
        "type": "function",
        "z": "f7d5cf3810421cf3",
        "name": "Get IP Address",
        "func": "\n\n\nconst interfaces = os.networkInterfaces()\nmsg.interfaces = context.get('getIpAddresses')(interfaces)\nreturn msg",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "\n\nfunction getIpAddresses(interfaces) {\n    const reg = /^(wlan|usb|eth|en)/;\n    const addresses = {};\n    for (let iface in interfaces) {\n        for (let i = 0; i < interfaces[iface].length; i++) {\n            let address = interfaces[iface][i];\n            /* Ipv4 & 排除内部接口 & 匹配当前优先级的网口名称 */\n            var matches = iface.match(reg);\n            if (\n                matches &&\n                matches[1] &&\n                address.family === \"IPv4\" &&\n                !address.internal\n            ) {\n                addresses[matches[1]] = address.address;\n            }\n        }\n    }\n    return addresses;\n}\ncontext.set(\"getIpAddresses\", getIpAddresses); ",
        "finalize": "",
        "libs": [
            {
                "var": "os",
                "module": "os"
            }
        ],
        "x": 300,
        "y": 240,
        "wires": [
            [
                "4d040b9fa3995f53",
                "09137b52dd5df373",
                "7fcfaff22ec5f6b0",
                "2a077bb2499cfd50",
                "7abb523b6155d2a0"
            ]
        ]
    },
    {
        "id": "38189ad19cbf635b",
        "type": "inject",
        "z": "f7d5cf3810421cf3",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 90,
        "y": 240,
        "wires": [
            [
                "dd6f8c079532cbd0"
            ]
        ]
    },
    {
        "id": "06a611e9632e5064",
        "type": "comment",
        "z": "f7d5cf3810421cf3",
        "name": "Basic Web Functions",
        "info": "Here are the basic web functions for reCamera.\nPlease notice that if you change this part, the basic functions for the reCamera could be damaged or missing.",
        "x": 640,
        "y": 40,
        "wires": []
    },
    {
        "id": "2a077bb2499cfd50",
        "type": "ui-template",
        "z": "f7d5cf3810421cf3",
        "group": "a71db265f099f44c",
        "page": "",
        "ui": "",
        "name": "System Update",
        "order": 3,
        "width": "6",
        "height": "6",
        "head": "",
        "format": "<template>\n  <div>\n    <div id=\"iframe_block\">\n      <!-- <div v-if=\"isScaning && !iframeUrl\" class=\"skeleton_box\"></div> -->\n      <iframe id=\"iframe_recamera\" :src=\"iframeUrl\"></iframe>\n      <!-- <div v-else>\n        No website found, please check your network connection and\n        <button @click=\"function(){location.reload()}\">Refresh</button>\n      </div> -->\n    </div>\n  </div>\n</template>\n\n<script>\n  export default {\n    data() {\n      console.log(12312);\n      function getDeviceType() {\n        const userAgent = navigator.userAgent.toLowerCase();\n        return;\n        /mobile|android|iphone|ipad|ipod|blackberry|iemobile|opera mini/.test(\n          userAgent\n        )\n          ? \"PC\"\n          : \"mobile\";\n      }\n      return {\n        ipByDevice: \"\",\n        enabledIpList: [],\n        checkAllIps: true,\n        isScaning: false,\n        scanningTimeout: 3000, // ms\n        deviceType: getDeviceType(),\n        iframeUrl: `http://${window.location.hostname}/#/system?disablelayout=1`\n      };\n    },\n    computed: {\n      // iframeUrl: function () {\n      //   if (this.isScaning) {\n      //     return;\n      //   }\n      //   const ipByDevice = this.ipByDevice;\n      //   const ipList = this.enabledIpList;\n\n      //   // 无任何可用\n      //   if (!(ipList.length > 0)) {\n      //     return ipByDevice ? this.getUrl(ipByDevice) : null;\n      //   }\n\n      //   if (ipByDevice && ipList.includes(ipByDevice)) {\n      //     return this.getUrl(ipByDevice);\n      //   }\n      //   return this.getUrl(ipList[0]);\n      // }\n    },\n    watch: {\n      msg: function (msg, prevMsg) {\n        try {\n          //debounce 防抖\n          if (\n            prevMsg &&\n            prevMsg.interfaces &&\n            JSON.stringify(prevMsg.interfaces) ===\n              JSON.stringify(msg.interfaces)\n          ) {\n            console.log('🙈🙈 Same msg: Skip....')\n            return;\n          }\n        } catch (e) {\n          console.log(e);\n        }\n        this.scanning(msg);\n      }\n    },\n    methods: {\n      getUrl(ipAddress) {\n        return `http://${ipAddress}/#/system?disablelayout=1`;\n      },\n      scanning(msg) {\n        if (!(msg && msg.interfaces)) {\n          return;\n        }\n        this.ipByDevice = this.getIpByDevice(msg.interfaces);\n        this.scaningAddreses(msg.interfaces);\n      },\n      getIpByDevice: function (addresses) {\n        const ipAddress =\n          (this.deviceType === \"PC\"\n            ? addresses[\"usb\"] || addresses[\"wlan\"]\n            : addresses[\"wlan\"] || addresses[\"usb\"]) ||\n          addresses[\"eth\"] ||\n          addresses[\"en\"];\n        if (!ipAddress) {\n          return null;\n        }\n        return ipAddress;\n      },\n\n      scaningAddreses: function (addresses) {\n        if (!addresses || this.isScaning) {\n          return;\n        }\n        console.log(\"scanning addresses\");\n        const self = this;\n        let results = [];\n        var keys = Object.keys(addresses);\n        const len = keys.length;\n        self.isScaning = true;\n\n        let fn = (i) => {\n          if (\n            i >= len ||\n            (!self.checkAllIps && self.enabledIpList.length > 0)\n          ) {\n            self.isScaning = false;\n            self.enabledIpList = results;\n            console.log(\n              `%cScaning Finished ✅\\n✨Enabled Addresses: ${self.enabledIpList.join(\n                \",\"\n              )}`,\n              \"color:#87ba32\"\n            );\n\n            fn = () => {};\n            return;\n          }\n          let src = self.getUrl(addresses[keys[i]]);\n          const xhr = new XMLHttpRequest();\n          xhr.timeout = self.scanningTimeout;\n\n          const errorFn = () => {\n            fn(++i);\n          };\n\n          xhr.onload = function () {\n            if (xhr.status >= 200 && xhr.status < 300) {\n              results.push(addresses[keys[i]]);\n              console.log(\n                `%c✨(${i + 1}/${len})ping test Success: ${src}`,\n                \"color: #87ba32;\"\n              );\n              fn(++i);\n              return;\n            }\n            errorFn();\n          };\n\n          xhr.onerror = function () {\n            errorFn();\n            console.log(\n              `%c🚥(${i + 1}/${len}) ping test error: ${src}`,\n              \"color:red\"\n            );\n          };\n          // 定义超时回调\n          xhr.ontimeout = function () {\n            console.log(\n              `%c🚥(${i + 1}/${len}) ping test timeout: ${src}`,\n              \"color:red;\"\n            );\n            errorFn();\n          };\n\n          console.log(\n            `%c🚥(${i + 1}/${len}) start ping test: ${src}`,\n            \"color: #d8eeff;\"\n          );\n          xhr.open(\"GET\", src, true);\n          // 发送请求\n          xhr.send();\n        };\n        fn(0);\n      },\n\n      // 获取所有可用IP\n      getIpAddresses: function (interfaces) {\n        const reg = /^(wlan|usb|eth|en)/;\n        const addresses = {};\n        for (let iface in interfaces) {\n          for (let i = 0; i < interfaces[iface].length; i++) {\n            let address = interfaces[iface][i];\n            /* Ipv4 & 排除内部接口 & 匹配当前优先级的网口名称 */\n            var matches = iface.match(reg);\n            if (\n              matches &&\n              matches[1] &&\n              address.family === \"IPv4\" &&\n              !address.internal\n            ) {\n              addresses[matches[1]] = address.address;\n            }\n          }\n        }\n        return addresses;\n      }\n    },\n    mounted() {\n      this.scanning(this.msg);\n    }\n  };\n</script>\n<style>\n  body,\n  html {\n    overflow: auto;\n    margin: 0 0 0 0;\n    padding: 0 0 0 0;\n  }\n\n  #iframe_block {\n    overflow: auto;\n    margin: 0 0 0 0;\n    padding: 0 0 0 0;\n    box-sizing: border-box;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    min-height: 500px;\n    z-index: 10000;\n    background-color: #eee;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n  }\n\n  #iframe_block iframe {\n    width: 100%;\n    height: 100%;\n    border: 0;\n    margin: 0 0 0 0;\n    padding: 0 0 0 0;\n    box-sizing: border-box;\n  }\n\n  .skeleton_box {\n    width: 50%;\n    height: 50%;\n    background: #e0e0e0;\n    border-radius: 20px;\n    position: relative;\n    overflow: hidden;\n  }\n\n  .skeleton_box::after {\n    content: \"\";\n    position: absolute;\n    top: 0;\n    left: -100%;\n    width: 100%;\n    height: 100%;\n    background: linear-gradient(90deg,\n        rgba(255, 255, 255, 0) 0%,\n        rgba(255, 255, 255, 0.5) 50%,\n        rgba(255, 255, 255, 0) 100%);\n    animation: shimmer 1.5s infinite;\n  }\n\n  @keyframes shimmer {\n    0% {\n      left: -100%;\n    }\n\n    100% {\n      left: 100%;\n    }\n  }\n</style>",
        "storeOutMessages": true,
        "passthru": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 620,
        "y": 480,
        "wires": [
            []
        ]
    },
    {
        "id": "7abb523b6155d2a0",
        "type": "ui-template",
        "z": "f7d5cf3810421cf3",
        "group": "92c61ece68bb9dd5",
        "page": "",
        "ui": "",
        "name": "Power",
        "order": 1,
        "width": "6",
        "height": "6",
        "head": "",
        "format": "<template>\n  <div>\n    <div id=\"iframe_block\">\n      <!-- <div v-if=\"isScaning && !iframeUrl\" class=\"skeleton_box\"></div> -->\n      <iframe id=\"iframe_recamera\" :src=\"iframeUrl\"></iframe>\n      <!-- <div v-else>\n        No website found, please check your network connection and\n        <button @click=\"function(){location.reload()}\">Refresh</button>\n      </div> -->\n    </div>\n  </div>\n</template>\n\n<script>\n  export default {\n    data() {\n      console.log(12312);\n      function getDeviceType() {\n        const userAgent = navigator.userAgent.toLowerCase();\n        return;\n        /mobile|android|iphone|ipad|ipod|blackberry|iemobile|opera mini/.test(\n          userAgent\n        )\n          ? \"PC\"\n          : \"mobile\";\n      }\n      return {\n        ipByDevice: \"\",\n        enabledIpList: [],\n        checkAllIps: true,\n        isScaning: false,\n        scanningTimeout: 3000, // ms\n        deviceType: getDeviceType(),\n        iframeUrl: `http://${window.location.hostname}/#/power?disablelayout=1`\n      };\n    },\n    computed: {\n      // iframeUrl: function () {\n      //   if (this.isScaning) {\n      //     return;\n      //   }\n      //   const ipByDevice = this.ipByDevice;\n      //   const ipList = this.enabledIpList;\n\n      //   // 无任何可用\n      //   if (!(ipList.length > 0)) {\n      //     return ipByDevice ? this.getUrl(ipByDevice) : null;\n      //   }\n\n      //   if (ipByDevice && ipList.includes(ipByDevice)) {\n      //     return this.getUrl(ipByDevice);\n      //   }\n\n      //   return this.getUrl(ipList[0]);\n      // }\n    },\n    watch: {\n      msg: function (msg, prevMsg) {\n        try {\n          //debounce 防抖\n          if (\n            prevMsg &&\n            prevMsg.interfaces &&\n            JSON.stringify(prevMsg.interfaces) ===\n              JSON.stringify(msg.interfaces)\n          ) {\n            console.log('🙈🙈 Same msg: Skip....')\n            return;\n          }\n        } catch (e) {\n          console.log(e);\n        }\n        this.scanning(msg);\n      }\n    },\n    methods: {\n      getUrl(ipAddress) {\n        return `http://${ipAddress}/#/power?disablelayout=1`;\n      },\n      scanning(msg) {\n        if (!(msg && msg.interfaces)) {\n          return;\n        }\n        this.ipByDevice = this.getIpByDevice(msg.interfaces);\n        this.scaningAddreses(msg.interfaces);\n      },\n      getIpByDevice: function (addresses) {\n        const ipAddress =\n          (this.deviceType === \"PC\"\n            ? addresses[\"usb\"] || addresses[\"wlan\"]\n            : addresses[\"wlan\"] || addresses[\"usb\"]) ||\n          addresses[\"eth\"] ||\n          addresses[\"en\"];\n        if (!ipAddress) {\n          return null;\n        }\n        return ipAddress;\n      },\n\n      scaningAddreses: function (addresses) {\n        if (!addresses || this.isScaning) {\n          return;\n        }\n        console.log(\"scanning addresses\");\n        const self = this;\n        let results = [];\n        var keys = Object.keys(addresses);\n        const len = keys.length;\n        self.isScaning = true;\n\n        let fn = (i) => {\n          if (\n            i >= len ||\n            (!self.checkAllIps && self.enabledIpList.length > 0)\n          ) {\n            self.isScaning = false;\n            self.enabledIpList = results;\n            console.log(\n              `%cScaning Finished ✅\\n✨Enabled Addresses: ${self.enabledIpList.join(\n                \",\"\n              )}`,\n              \"color:#87ba32\"\n            );\n\n            fn = () => {};\n            return;\n          }\n          let src = self.getUrl(addresses[keys[i]]);\n          const xhr = new XMLHttpRequest();\n          xhr.timeout = self.scanningTimeout;\n\n          const errorFn = () => {\n            fn(++i);\n          };\n\n          xhr.onload = function () {\n            if (xhr.status >= 200 && xhr.status < 300) {\n              results.push(addresses[keys[i]]);\n              console.log(\n                `%c✨(${i + 1}/${len})ping test Success: ${src}`,\n                \"color: #87ba32;\"\n              );\n              fn(++i);\n              return;\n            }\n            errorFn();\n          };\n\n          xhr.onerror = function () {\n            errorFn();\n            console.log(\n              `%c🚥(${i + 1}/${len}) ping test error: ${src}`,\n              \"color:red\"\n            );\n          };\n          // 定义超时回调\n          xhr.ontimeout = function () {\n            console.log(\n              `%c🚥(${i + 1}/${len}) ping test timeout: ${src}`,\n              \"color:red;\"\n            );\n            errorFn();\n          };\n\n          console.log(\n            `%c🚥(${i + 1}/${len}) start ping test: ${src}`,\n            \"color: #d8eeff;\"\n          );\n          xhr.open(\"GET\", src, true);\n          // 发送请求\n          xhr.send();\n        };\n        fn(0);\n      },\n\n      // 获取所有可用IP\n      getIpAddresses: function (interfaces) {\n        const reg = /^(wlan|usb|eth|en)/;\n        const addresses = {};\n        for (let iface in interfaces) {\n          for (let i = 0; i < interfaces[iface].length; i++) {\n            let address = interfaces[iface][i];\n            /* Ipv4 & 排除内部接口 & 匹配当前优先级的网口名称 */\n            var matches = iface.match(reg);\n            if (\n              matches &&\n              matches[1] &&\n              address.family === \"IPv4\" &&\n              !address.internal\n            ) {\n              addresses[matches[1]] = address.address;\n            }\n          }\n        }\n        return addresses;\n      }\n    },\n    mounted() {\n      this.scanning(this.msg);\n    }\n  };\n</script>\n<style>\n  body,\n  html {\n    overflow: auto;\n    margin: 0 0 0 0;\n    padding: 0 0 0 0;\n  }\n\n  #iframe_block {\n    overflow: auto;\n    margin: 0 0 0 0;\n    padding: 0 0 0 0;\n    box-sizing: border-box;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    min-height: 500px;\n    z-index: 10000;\n    background-color: #eee;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n  }\n\n  #iframe_block iframe {\n    width: 100%;\n    height: 100%;\n    border: 0;\n    margin: 0 0 0 0;\n    padding: 0 0 0 0;\n    box-sizing: border-box;\n  }\n\n  .skeleton_box {\n    width: 50%;\n    height: 50%;\n    background: #e0e0e0;\n    border-radius: 20px;\n    position: relative;\n    overflow: hidden;\n  }\n\n  .skeleton_box::after {\n    content: \"\";\n    position: absolute;\n    top: 0;\n    left: -100%;\n    width: 100%;\n    height: 100%;\n    background: linear-gradient(90deg,\n        rgba(255, 255, 255, 0) 0%,\n        rgba(255, 255, 255, 0.5) 50%,\n        rgba(255, 255, 255, 0) 100%);\n    animation: shimmer 1.5s infinite;\n  }\n\n  @keyframes shimmer {\n    0% {\n      left: -100%;\n    }\n\n    100% {\n      left: 100%;\n    }\n  }\n</style>",
        "storeOutMessages": true,
        "passthru": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 590,
        "y": 540,
        "wires": [
            []
        ]
    },
    {
        "id": "f368bcfbab683dc7",
        "type": "inject",
        "z": "22d80629fd354a7c",
        "name": "update",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "30",
        "crontab": "",
        "once": true,
        "onceDelay": "",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 240,
        "y": 320,
        "wires": [
            [
                "8fb63507a768078d",
                "952fd690c1ebb840",
                "a7504434189b32e7",
                "ce86ca951d10b0c7",
                "bfaa44172ab5326f",
                "be4da931e7ab6f0d"
            ]
        ]
    },
    {
        "id": "8abb6db8dffff349",
        "type": "function",
        "z": "22d80629fd354a7c",
        "name": "",
        "func": "msg.payload = msg.payload.memusage;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 626,
        "y": 655,
        "wires": [
            [
                "d6c3a7dc48672ee6"
            ]
        ]
    },
    {
        "id": "3da76238dafd14a2",
        "type": "function",
        "z": "22d80629fd354a7c",
        "name": "",
        "func": "function formatBytes(bytes,decimals) {\n   if(bytes === 0) return '0 Byte';\n   var k = 1000; // or 1024 for binary\n   var dm = decimals + 1 || 3;\n   var sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\n   var i = Math.floor(Math.log(bytes) / Math.log(k));\n   return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];\n}\n\nmsg.payload = formatBytes(msg.payload.totalmem);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 626,
        "y": 695,
        "wires": [
            [
                "63853676b1ff93d4"
            ]
        ]
    },
    {
        "id": "9aaf0c77fb404846",
        "type": "function",
        "z": "22d80629fd354a7c",
        "name": "",
        "func": "function formatBytes(bytes,decimals) {\n   if(bytes === 0) return '0 Byte';\n   var k = 1000; // or 1024 for binary\n   var dm = decimals + 1 || 3;\n   var sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\n   var i = Math.floor(Math.log(bytes) / Math.log(k));\n   return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];\n}\n\nmsg.payload = formatBytes(msg.payload.freemem);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 626,
        "y": 735,
        "wires": [
            [
                "1e2435457cd568bf"
            ]
        ]
    },
    {
        "id": "13d323ceefbfc00f",
        "type": "function",
        "z": "22d80629fd354a7c",
        "name": "",
        "func": "function timeConversion(millisec) {\n\n    var seconds = (millisec / 1000).toFixed(1);\n\n    var minutes = (millisec / (1000 * 60)).toFixed(1);\n\n    var hours = (millisec / (1000 * 60 * 60)).toFixed(1);\n\n    var days = (millisec / (1000 * 60 * 60 * 24)).toFixed(1);\n\n    if (seconds < 60) {\n        return seconds + \" Sec\";\n    } else if (minutes < 60) {\n        return minutes + \" Min\";\n    } else if (hours < 24) {\n        return hours + \" Hrs\";\n    } else {\n        return days + \" Days\"\n    }\n}\n\nmsg.payload = timeConversion(msg.payload.uptime * 1000);\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 607,
        "y": 155,
        "wires": [
            [
                "605c0ed155d63cba"
            ]
        ]
    },
    {
        "id": "4e273569d8ae0ad3",
        "type": "function",
        "z": "22d80629fd354a7c",
        "name": "",
        "func": "msg.payload = msg.payload.hostname;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 606,
        "y": 192,
        "wires": [
            [
                "3ec7d36e51bf8ca3"
            ]
        ]
    },
    {
        "id": "0bfde21cb53fa9bc",
        "type": "function",
        "z": "22d80629fd354a7c",
        "name": "",
        "func": "msg.payload = msg.payload.platform;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 608,
        "y": 230,
        "wires": [
            [
                "3b00269fbf994534"
            ]
        ]
    },
    {
        "id": "75183caccd75901e",
        "type": "function",
        "z": "22d80629fd354a7c",
        "name": "",
        "func": "msg.payload = msg.payload.arch;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 609,
        "y": 269,
        "wires": [
            [
                "12db460d116ecb26"
            ]
        ]
    },
    {
        "id": "0afca53dd8ced5b4",
        "type": "function",
        "z": "22d80629fd354a7c",
        "name": "",
        "func": "msg.payload = msg.payload.memusage;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 626,
        "y": 615,
        "wires": [
            [
                "840bf29321f4fb23"
            ]
        ]
    },
    {
        "id": "c75d3b4d55305a43",
        "type": "comment",
        "z": "22d80629fd354a7c",
        "name": "Memory Usage",
        "info": "",
        "x": 826,
        "y": 575,
        "wires": []
    },
    {
        "id": "9b79bda7a969b178",
        "type": "comment",
        "z": "22d80629fd354a7c",
        "name": "System Information",
        "info": "",
        "x": 836,
        "y": 95,
        "wires": []
    },
    {
        "id": "840bf29321f4fb23",
        "type": "ui-chart",
        "z": "22d80629fd354a7c",
        "group": "7f2745813d799705",
        "name": "Memory - 24 Hours",
        "label": "24 Hours",
        "order": 4,
        "chartType": "line",
        "category": "topic",
        "categoryType": "msg",
        "xAxisLabel": "",
        "xAxisProperty": "",
        "xAxisPropertyType": "timestamp",
        "xAxisType": "time",
        "xAxisFormat": "",
        "xAxisFormatType": "HH:mm:ss",
        "xmin": "",
        "xmax": "",
        "yAxisLabel": "%",
        "yAxisProperty": "payload",
        "yAxisPropertyType": "msg",
        "ymin": "",
        "ymax": "",
        "bins": 10,
        "action": "append",
        "stackSeries": false,
        "pointShape": "circle",
        "pointRadius": 4,
        "showLegend": true,
        "removeOlder": 1,
        "removeOlderUnit": "86400",
        "removeOlderPoints": "",
        "colors": [
            "#0095ff",
            "#ff0000",
            "#ff7f0e",
            "#2ca02c",
            "#a347e1",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "textColor": [
            "#666666"
        ],
        "textColorDefault": true,
        "gridColor": [
            "#e5e5e5"
        ],
        "gridColorDefault": true,
        "width": 6,
        "height": 8,
        "className": "",
        "interpolation": "linear",
        "x": 836,
        "y": 615,
        "wires": [
            []
        ]
    },
    {
        "id": "d6c3a7dc48672ee6",
        "type": "ui-gauge",
        "z": "22d80629fd354a7c",
        "name": "Memory Usage",
        "group": "7f2745813d799705",
        "order": 1,
        "width": 3,
        "height": 3,
        "gtype": "gauge-half",
        "gstyle": "rounded",
        "title": "1 Minute",
        "units": "Usage",
        "icon": "memory",
        "prefix": "",
        "suffix": "%",
        "segments": [
            {
                "from": "0",
                "color": "#5cd65c"
            },
            {
                "from": "40",
                "color": "#ffc800"
            },
            {
                "from": "70",
                "color": "#ea5353"
            }
        ],
        "min": 0,
        "max": "100",
        "sizeThickness": 16,
        "sizeGap": 4,
        "sizeKeyThickness": 8,
        "styleRounded": true,
        "styleGlow": false,
        "className": "",
        "x": 826,
        "y": 655,
        "wires": []
    },
    {
        "id": "63853676b1ff93d4",
        "type": "ui-text",
        "z": "22d80629fd354a7c",
        "group": "7f2745813d799705",
        "order": 3,
        "width": 0,
        "height": 0,
        "name": "Total Memory",
        "label": "Total Memory",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#717171",
        "wrapText": false,
        "className": "",
        "x": 826,
        "y": 695,
        "wires": []
    },
    {
        "id": "1e2435457cd568bf",
        "type": "ui-text",
        "z": "22d80629fd354a7c",
        "group": "7f2745813d799705",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "Free Memory",
        "label": "Free Memory",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#717171",
        "wrapText": false,
        "className": "",
        "x": 816,
        "y": 735,
        "wires": []
    },
    {
        "id": "605c0ed155d63cba",
        "type": "ui-text",
        "z": "22d80629fd354a7c",
        "group": "a71db265f099f44c",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "Uptime",
        "label": "Uptime",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#717171",
        "wrapText": false,
        "className": "",
        "x": 806,
        "y": 155,
        "wires": []
    },
    {
        "id": "3ec7d36e51bf8ca3",
        "type": "ui-text",
        "z": "22d80629fd354a7c",
        "group": "a71db265f099f44c",
        "order": 5,
        "width": 0,
        "height": 0,
        "name": "Hostname",
        "label": "Hostname",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#717171",
        "wrapText": false,
        "className": "",
        "x": 816,
        "y": 195,
        "wires": []
    },
    {
        "id": "3b00269fbf994534",
        "type": "ui-text",
        "z": "22d80629fd354a7c",
        "group": "a71db265f099f44c",
        "order": 4,
        "width": 0,
        "height": 0,
        "name": "Platform",
        "label": "Platform",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#717171",
        "wrapText": false,
        "className": "",
        "x": 801,
        "y": 242,
        "wires": []
    },
    {
        "id": "12db460d116ecb26",
        "type": "ui-text",
        "z": "22d80629fd354a7c",
        "group": "a71db265f099f44c",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "Arch",
        "label": "Arch",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#717171",
        "wrapText": false,
        "className": "",
        "x": 791,
        "y": 282,
        "wires": []
    },
    {
        "id": "bfaa44172ab5326f",
        "type": "exec",
        "z": "22d80629fd354a7c",
        "command": "top -d 0.5 -b -n2 | grep \"Cpu(s)\"|tail -n 1 | awk '{print ($2 + $4) / 100}'",
        "addpay": false,
        "append": "",
        "useSpawn": "",
        "timer": "",
        "winHide": false,
        "name": "CPU Load",
        "x": 476,
        "y": 435,
        "wires": [
            [
                "ec0493bfbba1220d",
                "2be338b2990bb9c0"
            ],
            [],
            []
        ]
    },
    {
        "id": "e51fd341b68b3af2",
        "type": "comment",
        "z": "22d80629fd354a7c",
        "name": "CPU Load",
        "info": "",
        "x": 806,
        "y": 395,
        "wires": []
    },
    {
        "id": "ec0493bfbba1220d",
        "type": "ui-gauge",
        "z": "22d80629fd354a7c",
        "name": "CPU",
        "group": "6a7d65728351652c",
        "order": 1,
        "width": 3,
        "height": 3,
        "gtype": "gauge-half",
        "gstyle": "rounded",
        "title": "CPU",
        "units": "Usage",
        "icon": "cpu-64-bit",
        "prefix": "",
        "suffix": "%",
        "segments": [
            {
                "from": "0",
                "color": "#5cd65c"
            },
            {
                "from": "40",
                "color": "#ffc800"
            },
            {
                "from": "70",
                "color": "#ea5353"
            }
        ],
        "min": 0,
        "max": "100",
        "sizeThickness": 16,
        "sizeGap": 4,
        "sizeKeyThickness": 8,
        "styleRounded": true,
        "styleGlow": false,
        "className": "",
        "x": 796,
        "y": 435,
        "wires": []
    },
    {
        "id": "2be338b2990bb9c0",
        "type": "ui-chart",
        "z": "22d80629fd354a7c",
        "group": "6a7d65728351652c",
        "name": "CPU Load%",
        "label": "CPU Load%",
        "order": 2,
        "chartType": "line",
        "category": "topic",
        "categoryType": "msg",
        "xAxisLabel": "",
        "xAxisProperty": "",
        "xAxisPropertyType": "timestamp",
        "xAxisType": "time",
        "xAxisFormat": "",
        "xAxisFormatType": "HH:mm:ss",
        "xmin": "",
        "xmax": "",
        "yAxisLabel": "%",
        "yAxisProperty": "payload",
        "yAxisPropertyType": "msg",
        "ymin": "",
        "ymax": "",
        "bins": 10,
        "action": "append",
        "stackSeries": false,
        "pointShape": "circle",
        "pointRadius": 4,
        "showLegend": true,
        "removeOlder": "5",
        "removeOlderUnit": "60",
        "removeOlderPoints": "",
        "colors": [
            "#0095ff",
            "#ff0000",
            "#ff7f0e",
            "#2ca02c",
            "#a347e1",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "textColor": [
            "#666666"
        ],
        "textColorDefault": true,
        "gridColor": [
            "#e5e5e5"
        ],
        "gridColorDefault": true,
        "width": 6,
        "height": 8,
        "className": "",
        "interpolation": "linear",
        "x": 816,
        "y": 475,
        "wires": [
            []
        ]
    },
    {
        "id": "be4da931e7ab6f0d",
        "type": "exec",
        "z": "22d80629fd354a7c",
        "command": "df -h",
        "addpay": false,
        "append": "",
        "useSpawn": "",
        "timer": "",
        "winHide": false,
        "name": "Disk Usage",
        "x": 436,
        "y": 855,
        "wires": [
            [
                "c9217423d15fd7fd"
            ],
            [],
            []
        ]
    },
    {
        "id": "c9217423d15fd7fd",
        "type": "function",
        "z": "22d80629fd354a7c",
        "name": "function 3",
        "func": "// Input payload as a string\nlet data = msg.payload;\n\n// Split the input into lines\nlet lines = data.split('\\n');\n\n// Initialize variables\nlet totalSize = 0;       // Total space size in GB\nlet totalUsed = 0.256;       // Used space in GB\nlet totalAvailable = 0;   // Available space in GB\n\n// Updated regex to match both MB and GB, and all filesystem types\nlet regex = /(\\S+)\\s+([\\d.]+)([MKG]?)\\s+([\\d.]+)([MKG]?)\\s+([\\d.]+)([MKG]?)\\s+(\\d+)%/;\n\n// Function to convert MB to GB\nfunction mbToGb(value, unit) {\n    switch (unit) {\n        case 'G':\n            return value;\n        case 'M':\n            return value / 1024;\n        case 'K':\n            return value / 1024 / 1024;\n        default:\n            return 0;\n    }\n}\n\n// Iterate through each line and sum the values\nfor (let line of lines) {\n    let match = line.match(regex);\n\n    if (match && (match[1] === \"/dev/root\" || match[1] === \"/dev/mmcblk0p6\")) {\n        // Extract values and units\n        let size = parseFloat(match[2]);\n        let sizeUnit = match[3];\n        let used = parseFloat(match[4]);\n        let usedUnit = match[5];\n        let available = parseFloat(match[6]);\n        let availUnit = match[7];\n        \n        // Convert all values to GB\n        totalSize += mbToGb(size, sizeUnit);\n        totalUsed += mbToGb(used, usedUnit);\n        totalAvailable += mbToGb(available, availUnit);\n    }\n}\n// Format the results to two decimal places\n// totalSize = totalSize.toFixed(2);         \ntotalUsed = totalUsed.toFixed(2);       \ntotalAvailable = totalAvailable.toFixed(2); \ntotalSize = (Number(totalUsed) + Number(totalAvailable)).toFixed(2);         \n\n// Calculate used and free percentages\nlet usedPercentage = ((totalUsed / totalSize) * 100).toFixed(2);\nlet freePercentage = ((totalAvailable / totalSize) * 100).toFixed(2);\n\n// Create different messages for each output\nlet output1 = { payload: totalSize };           // Total size in GB\nlet output2 = { payload: totalUsed };            // Used space in GB\nlet output3 = { payload: totalAvailable };       // Available space in GB\nlet output4 = { payload: usedPercentage };       // Used percentage\nlet output5 = { payload: freePercentage };       // Free percentage\n\n// Return all five outputs as an array\nreturn [output1, output2, output3, output4, output5];\n",
        "outputs": 5,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 626,
        "y": 875,
        "wires": [
            [
                "5649f217373f6705"
            ],
            [
                "e7d6a0ca84bc4a74"
            ],
            [
                "68a0065c07ad9a8f"
            ],
            [
                "0492a5073b5f4979"
            ],
            [
                "c94410a0a1e4a792"
            ]
        ]
    },
    {
        "id": "e68159548b2966fe",
        "type": "comment",
        "z": "22d80629fd354a7c",
        "name": "Disk Usage",
        "info": "",
        "x": 816,
        "y": 815,
        "wires": []
    },
    {
        "id": "5649f217373f6705",
        "type": "ui-text",
        "z": "22d80629fd354a7c",
        "group": "fea0f6f907349d71",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "Total Storage",
        "label": "Total Storage (GB)",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#717171",
        "wrapText": false,
        "className": "",
        "x": 816,
        "y": 855,
        "wires": []
    },
    {
        "id": "e7d6a0ca84bc4a74",
        "type": "ui-text",
        "z": "22d80629fd354a7c",
        "group": "fea0f6f907349d71",
        "order": 3,
        "width": 0,
        "height": 0,
        "name": "Used Storage",
        "label": "Used Storage (GB)",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#717171",
        "wrapText": false,
        "className": "",
        "x": 826,
        "y": 895,
        "wires": []
    },
    {
        "id": "68a0065c07ad9a8f",
        "type": "ui-text",
        "z": "22d80629fd354a7c",
        "group": "fea0f6f907349d71",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "Free Storage",
        "label": "Free Storage (GB)",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#717171",
        "wrapText": false,
        "className": "",
        "x": 816,
        "y": 935,
        "wires": []
    },
    {
        "id": "0492a5073b5f4979",
        "type": "ui-gauge",
        "z": "22d80629fd354a7c",
        "name": "Used Storage",
        "group": "fea0f6f907349d71",
        "order": 5,
        "width": 3,
        "height": 3,
        "gtype": "gauge-tank",
        "gstyle": "needle",
        "title": "Used Storage",
        "units": "units",
        "icon": "",
        "prefix": "",
        "suffix": "",
        "segments": [
            {
                "from": "0",
                "color": "#a8f5ff"
            },
            {
                "from": "15",
                "color": "#55dbec"
            },
            {
                "from": "35",
                "color": "#53b4fd"
            },
            {
                "from": "50",
                "color": "#2397d1"
            }
        ],
        "min": 0,
        "max": "100",
        "sizeThickness": 16,
        "sizeGap": 4,
        "sizeKeyThickness": 8,
        "styleRounded": true,
        "styleGlow": false,
        "className": "",
        "x": 826,
        "y": 975,
        "wires": []
    },
    {
        "id": "c94410a0a1e4a792",
        "type": "ui-gauge",
        "z": "22d80629fd354a7c",
        "name": "Free Storage",
        "group": "fea0f6f907349d71",
        "order": 4,
        "width": 3,
        "height": 3,
        "gtype": "gauge-tank",
        "gstyle": "needle",
        "title": "Free Storage",
        "units": "units",
        "icon": "",
        "prefix": "",
        "suffix": "",
        "segments": [
            {
                "from": "0",
                "color": "#a8f5ff"
            },
            {
                "from": "15",
                "color": "#55dbec"
            },
            {
                "from": "35",
                "color": "#53b4fd"
            },
            {
                "from": "50",
                "color": "#2397d1"
            }
        ],
        "min": 0,
        "max": "100",
        "sizeThickness": 16,
        "sizeGap": 4,
        "sizeKeyThickness": 8,
        "styleRounded": true,
        "styleGlow": false,
        "className": "",
        "x": 816,
        "y": 1015,
        "wires": []
    },
    {
        "id": "8fb63507a768078d",
        "type": "OS",
        "z": "22d80629fd354a7c",
        "name": "",
        "x": 436,
        "y": 195,
        "wires": [
            [
                "4e273569d8ae0ad3",
                "0bfde21cb53fa9bc",
                "75183caccd75901e"
            ]
        ]
    },
    {
        "id": "952fd690c1ebb840",
        "type": "Uptime",
        "z": "22d80629fd354a7c",
        "name": "",
        "x": 446,
        "y": 155,
        "wires": [
            [
                "13d323ceefbfc00f"
            ]
        ]
    },
    {
        "id": "a7504434189b32e7",
        "type": "CPUs",
        "z": "22d80629fd354a7c",
        "name": "",
        "x": 435,
        "y": 245,
        "wires": [
            []
        ]
    },
    {
        "id": "ce86ca951d10b0c7",
        "type": "Memory",
        "z": "22d80629fd354a7c",
        "name": "",
        "x": 446,
        "y": 615,
        "wires": [
            [
                "8abb6db8dffff349",
                "3da76238dafd14a2",
                "9aaf0c77fb404846",
                "0afca53dd8ced5b4"
            ]
        ]
    },
    {
        "id": "9e3e342695458112",
        "type": "ui-slider",
        "z": "5924433263ceb70d",
        "group": "37a6e7f9304e351c",
        "name": "Confidence",
        "label": "Confidence",
        "tooltip": "",
        "order": 5,
        "width": 0,
        "height": 0,
        "passthru": false,
        "outs": "all",
        "topic": "topic",
        "topicType": "msg",
        "thumbLabel": "true",
        "showTicks": "always",
        "min": 0,
        "max": "100",
        "step": 1,
        "className": "",
        "iconPrepend": "",
        "iconAppend": "",
        "color": "",
        "colorTrack": "",
        "colorThumb": "",
        "showTextField": false,
        "x": 131.4286003112793,
        "y": 280.0000190734863,
        "wires": [
            [
                "f40cb9db86bef8a5"
            ]
        ]
    },
    {
        "id": "5c78727dc73b9fa9",
        "type": "ui-slider",
        "z": "5924433263ceb70d",
        "group": "37a6e7f9304e351c",
        "name": "IoU",
        "label": "IoU",
        "tooltip": "",
        "order": 4,
        "width": 0,
        "height": 0,
        "passthru": false,
        "outs": "all",
        "topic": "topic",
        "topicType": "msg",
        "thumbLabel": "true",
        "showTicks": "always",
        "min": 0,
        "max": "100",
        "step": 1,
        "className": "",
        "iconPrepend": "",
        "iconAppend": "",
        "color": "",
        "colorTrack": "",
        "colorThumb": "",
        "showTextField": false,
        "x": 110,
        "y": 200,
        "wires": [
            [
                "54283c013e16973b"
            ]
        ]
    },
    {
        "id": "6b934f208a637406",
        "type": "ui-template",
        "z": "5924433263ceb70d",
        "group": "37a6e7f9304e351c",
        "page": "",
        "ui": "",
        "name": "Preview Page",
        "order": 3,
        "width": "5",
        "height": "3",
        "head": "",
        "format": "<template>\n    <div :id=\"containerId\" style=\"width: 100%; height: 100%\">\n        <svg :id=\"svgId\" viewBox=\"0 50 640 640\"></svg>\n    </div>\n</template>\n\n<script>\n    export default {\n        computed: {\n            containerId() {\n                return `container`;\n            },\n            svgId() {\n                return `svg`;\n            },\n        },\n        methods: {\n            createSVGElement(type, attributes = {}) {\n                const element = document.createElementNS(\"http://www.w3.org/2000/svg\", type);\n                Object.keys(attributes).forEach((attr) => element.setAttribute(attr, attributes[attr]));\n                return element;\n            },\n            getColor(index, opacity = 1) {\n                const COLORS = [\n                    \"#FF0000\",\n                    \"#FF4500\",\n                    \"#FF6347\",\n                    \"#FF8C00\",\n                    \"#FFA500\",\n                    \"#FFD700\",\n                    \"#32CD32\",\n                    \"#006400\",\n                    \"#4169E1\",\n                    \"#0000FF\",\n                    \"#1E90FF\",\n                    \"#00FFFF\",\n                    \"#00CED1\",\n                    \"#20B2AA\",\n                    \"#FF1493\",\n                    \"#FF69B4\",\n                    \"#800080\",\n                    \"#8A2BE2\",\n                    \"#9400D3\",\n                    \"#9932CC\",\n                ];\n                const color = COLORS[index % COLORS.length];\n                if (opacity < 1 && opacity >= 0) {\n                    const r = parseInt(color.slice(1, 3), 16);\n                    const g = parseInt(color.slice(3, 5), 16);\n                    const b = parseInt(color.slice(5, 7), 16);\n                    return `rgba(${r}, ${g}, ${b}, ${opacity})`;\n                }\n                return color;\n            },\n            renderImage(container, group, data) {\n                if (data.image) {\n                    let img = document.getElementById(`image-output-img`);\n                    if (!img) {\n                        img = this.createSVGElement(\"image\", {\n                            id: `image-output-img`,\n                            x: \"0\",\n                            y: \"50\",\n                        });\n                        img.addEventListener(\"click\", () => this.removeGroup(group), { once: false });\n                        container.prepend(img);\n                    }\n                    img.setAttribute(\"href\", `data:image/jpeg;base64,${data.image}`);\n                } else if (data?.resolution) {\n                    const rect = this.createSVGElement(\"rect\", {\n                        x: \"0\",\n                        y: \"0\",\n                        width: data.resolution[0],\n                        height: data.resolution[1],\n                        fill: \"black\",\n                    });\n                    const text = this.createSVGElement(\"text\", {\n                        x: 10,\n                        y: 20,\n                        \"font-size\": \"16\",\n                        fill: \"yellow\",\n                        stroke: \"yellow\",\n                        \"font-family\": \"Arial\",\n                    });\n                    text.textContent = \"Warning: Please enable the model node's debug mode to display the actual image.\";\n                    group.appendChild(rect);\n                    group.appendChild(text);\n                }\n            },\n            renderLines(group, data) {\n                if (data?.lines) {\n                    data.lines.forEach((line, i) => {\n                        const x1 = line[0] * 0.01 * data.resolution[0];\n                        const y1 = line[1] * 0.01 * data.resolution[1];\n                        const x2 = line[2] * 0.01 * data.resolution[0];\n                        const y2 = line[3] * 0.01 * data.resolution[1];\n                        const color = this.getColor(i);\n                        const lineElement = this.createSVGElement(\"line\", {\n                            x1,\n                            y1,\n                            x2,\n                            y2,\n                            stroke: color,\n                            \"stroke-width\": \"1\",\n                        });\n                        group.appendChild(lineElement);\n                    });\n                }\n            },\n            renderBoxes(group, data) {\n                if (data?.boxes) {\n                    data.boxes.forEach((box, i) => {\n                        if (box?.length === 6) {\n                            const [x, y, w, h, score, tar] = box;\n                            const color = this.getColor(tar);\n                            const tarStr = data.labels?.[i] ?? `NA-${tar}`;\n                            const rect = this.createSVGElement(\"rect\", {\n                                x: x - w / 2,\n                                y: y - h / 2,\n                                width: w,\n                                height: h,\n                                fill: \"none\",\n                                stroke: color,\n                                \"stroke-width\": \"2\",\n                            });\n                            group.appendChild(rect);\n\n                            const rectText = this.createSVGElement(\"rect\", {\n                                x: x - w / 2,\n                                y: y - h / 2 - 14,\n                                width: w,\n                                height: 16,\n                                fill: color,\n                                stroke: color,\n                                \"stroke-width\": \"2\",\n                            });\n                            group.appendChild(rectText);\n\n                            const text = this.createSVGElement(\"text\", {\n                                x: x - w / 2 + 5,\n                                y: y - h / 2 - 2,\n                                \"font-size\": \"14\",\n                                fill: \"white\",\n                                \"font-family\": \"Arial\",\n                            });\n                            text.textContent = data?.tracks ? `#${data.tracks[i]}: ${tarStr}(${score})` : `${tarStr}(${score})`;\n                            group.appendChild(text);\n                        }\n                    });\n                }\n            },\n            renderClasses(group, data) {\n                if (data?.classes) {\n                    const rectHeight = data.resolution[1] / 16;\n                    data.classes.forEach(([score, tar], i) => {\n                        const tarStr = data.labels?.[i] ?? `NA-${tar}`;\n                        const rectWidth = data.resolution[0] / data.classes.length;\n                        const rect = this.createSVGElement(\"rect\", {\n                            x: rectWidth * i,\n                            y: 0,\n                            width: rectWidth,\n                            height: rectHeight,\n                            fill: this.getColor(tar),\n                            \"fill-opacity\": 0.3,\n                        });\n                        group.appendChild(rect);\n\n                        const text = this.createSVGElement(\"text\", {\n                            x: rectWidth * i,\n                            y: data.resolution[1] / 24,\n                            \"font-size\": data.resolution[1] / 24,\n                            \"font-weight\": \"bold\",\n                            \"font-family\": \"arial\",\n                            fill: \"#ffffff\",\n                        });\n                        text.textContent = `${tarStr}: ${score}`;\n                        group.appendChild(text);\n                    });\n                }\n            },\n            renderSegments(group, data) {\n                if (data?.segments) {\n                    data.segments.forEach((segment, i) => {\n                        const box = segment[0];\n                        const polygon = segment[1];\n                        let color = this.getColor(i);\n                        let rgba = this.getColor(i, 0.3);\n                        if (box?.length === 6) {\n                            const [x, y, w, h, score, tar] = box;\n                            color = this.getColor(tar);\n                            rgba = this.getColor(tar, 0.3);\n                            const tarStr = data.labels?.[i] ?? `NA-${tar}`;\n                            const rect = this.createSVGElement(\"rect\", {\n                                x: x - w / 2,\n                                y: y - h / 2,\n                                width: w,\n                                height: h,\n                                fill: \"none\",\n                                stroke: color,\n                                \"stroke-width\": \"2\",\n                            });\n                            group.appendChild(rect);\n\n                            const rectText = this.createSVGElement(\"rect\", {\n                                x: x - w / 2,\n                                y: y - h / 2 - 14,\n                                width: w,\n                                height: 16,\n                                fill: color,\n                                stroke: color,\n                                \"stroke-width\": \"2\",\n                            });\n                            group.appendChild(rectText);\n\n                            const text = this.createSVGElement(\"text\", {\n                                x: x - w / 2 + 5,\n                                y: y - h / 2 - 2,\n                                \"font-size\": \"14\",\n                                fill: \"white\",\n                                \"font-family\": \"Arial\",\n                            });\n                            text.textContent = data?.tracks ? `#${data.tracks[i]}: ${tarStr}(${score})` : `${tarStr}(${score})`;\n                            group.appendChild(text);\n                        }\n                        if (polygon) {\n                            function convertToPoints(polygon) {\n                                let points = \"\";\n                                for (let i = 0; i < polygon.length; i += 2) {\n                                    points += `${polygon[i]},${polygon[i + 1]} `;\n                                }\n                                return points.trim();\n                            }\n\n                            // Convert the data array to SVG points format\n                            const points = convertToPoints(polygon);\n\n                            const polygonElement = this.createSVGElement(\"polygon\", {\n                                points: points,\n                                fill: rgba,\n                                stroke: color,\n                                \"stroke-width\": \"2\",\n                            });\n                            group.appendChild(polygonElement);\n                        }\n                    });\n                }\n            },\n            renderKeypoints(group, data) {\n                if (!data?.keypoints) {\n                    return;\n                }\n                data.keypoints.forEach((keypoint, i) => {\n                    const box = keypoint[0];\n                    const keypoints = keypoint[1];\n                    let points = new Set();\n                    if (box?.length === 6) {\n                        const [x, y, w, h, score, tar] = box;\n                        const color = this.getColor(tar);\n                        const tarStr = data.labels?.[i] ?? `NA-${tar}`;\n                        const rect = this.createSVGElement(\"rect\", {\n                            x: x - w / 2,\n                            y: y - h / 2,\n                            width: w,\n                            height: h,\n                            fill: \"none\",\n                            stroke: color,\n                            \"stroke-width\": \"2\",\n                        });\n                        group.appendChild(rect);\n\n                        const rectText = this.createSVGElement(\"rect\", {\n                            x: x - w / 2,\n                            y: y - h / 2 - 14,\n                            width: w,\n                            height: 16,\n                            fill: color,\n                            stroke: color,\n                            \"stroke-width\": \"2\",\n                        });\n                        group.appendChild(rectText);\n\n                        const text = this.createSVGElement(\"text\", {\n                            x: x - w / 2 + 5,\n                            y: y - h / 2 - 2,\n                            \"font-size\": \"14\",\n                            fill: \"white\",\n                            stroke: \"white\",\n                            \"font-family\": \"Arial\",\n                        });\n                        text.textContent = data?.tracks ? `#${data.tracks[i]}: ${tarStr}(${score})` : `${tarStr}(${score})`;\n                        group.appendChild(text);\n                    }\n\n                    for (let j = 0; j < keypoints.length; j += 1) {\n                        const point = keypoints[j];\n                        const x = point[0];\n                        const y = point[1];\n                        const target = point[3] ? point[3] : j;\n                        // draw if point in the box\n                        if (x > box[0] - box[2] / 2 && x < box[0] + box[2] / 2 && y > box[1] - box[3] / 2 && y < box[1] + box[3] / 2) {\n                            points.add(target);\n                        }\n                    }\n\n                    if (keypoints?.length === 17) {\n                        // nose to left eye\n                        if (points.has(0) && points.has(1)) {\n                            const color = this.getColor(0);\n                            const line = this.createSVGElement(\"line\", {\n                                x1: keypoints[0][0],\n                                y1: keypoints[0][1],\n                                x2: keypoints[1][0],\n                                y2: keypoints[1][1],\n                                stroke: color,\n                                \"stroke-width\": \"2\",\n                            });\n                            group.appendChild(line);\n                        }\n                        // nose to right eye\n                        if (points.has(0) && points.has(2)) {\n                            const color = this.getColor(0);\n                            const line = this.createSVGElement(\"line\", {\n                                x1: keypoints[0][0],\n                                y1: keypoints[0][1],\n                                x2: keypoints[2][0],\n                                y2: keypoints[2][1],\n                                stroke: color,\n                                \"stroke-width\": \"2\",\n                            });\n                            group.appendChild(line);\n                        }\n                        // left eye to left ear\n                        if (points.has(1) && points.has(3)) {\n                            const color = this.getColor(0);\n                            const line = this.createSVGElement(\"line\", {\n                                x1: keypoints[1][0],\n                                y1: keypoints[1][1],\n                                x2: keypoints[3][0],\n                                y2: keypoints[3][1],\n                                stroke: color,\n                                \"stroke-width\": \"2\",\n                            });\n                            group.appendChild(line);\n                        }\n                        // right eye to right ear\n                        if (points.has(2) && points.has(4)) {\n                            const color = this.getColor(0);\n                            const line = this.createSVGElement(\"line\", {\n                                x1: keypoints[2][0],\n                                y1: keypoints[2][1],\n                                x2: keypoints[4][0],\n                                y2: keypoints[4][1],\n                                stroke: color,\n                                \"stroke-width\": \"2\",\n                            });\n                            group.appendChild(line);\n                        }\n                        // left ear to left shoulder\n                        if (points.has(3) && points.has(5)) {\n                            const color = this.getColor(0);\n                            const line = this.createSVGElement(\"line\", {\n                                x1: keypoints[3][0],\n                                y1: keypoints[3][1],\n                                x2: keypoints[5][0],\n                                y2: keypoints[5][1],\n                                stroke: color,\n                                \"stroke-width\": \"2\",\n                            });\n                            group.appendChild(line);\n                        }\n                        // right ear to right shoulder\n                        if (points.has(4) && points.has(6)) {\n                            const color = this.getColor(0);\n                            const line = this.createSVGElement(\"line\", {\n                                x1: keypoints[4][0],\n                                y1: keypoints[4][1],\n                                x2: keypoints[6][0],\n                                y2: keypoints[6][1],\n                                stroke: color,\n                                \"stroke-width\": \"2\",\n                            });\n                            group.appendChild(line);\n                        }\n                        // left shoulder to right shoulder\n                        if (points.has(5) && points.has(6)) {\n                            const color = this.getColor(1);\n                            const line = this.createSVGElement(\"line\", {\n                                x1: keypoints[5][0],\n                                y1: keypoints[5][1],\n                                x2: keypoints[6][0],\n                                y2: keypoints[6][1],\n                                stroke: color,\n                                \"stroke-width\": \"2\",\n                            });\n                            group.appendChild(line);\n                        }\n                        // left shoulder to left hip\n                        if (points.has(5) && points.has(11)) {\n                            const color = this.getColor(2);\n                            const line = this.createSVGElement(\"line\", {\n                                x1: keypoints[5][0],\n                                y1: keypoints[5][1],\n                                x2: keypoints[11][0],\n                                y2: keypoints[11][1],\n                                stroke: color,\n                                \"stroke-width\": \"2\",\n                            });\n                            group.appendChild(line);\n                        }\n                        // right shoulder to right hip\n                        if (points.has(6) && points.has(12)) {\n                            const color = this.getColor(2);\n                            const line = this.createSVGElement(\"line\", {\n                                x1: keypoints[6][0],\n                                y1: keypoints[6][1],\n                                x2: keypoints[12][0],\n                                y2: keypoints[12][1],\n                                stroke: color,\n                                \"stroke-width\": \"2\",\n                            });\n                            group.appendChild(line);\n                        }\n                        // left hip to right hip\n                        if (points.has(11) && points.has(12)) {\n                            const color = this.getColor(2);\n                            const line = this.createSVGElement(\"line\", {\n                                x1: keypoints[11][0],\n                                y1: keypoints[11][1],\n                                x2: keypoints[12][0],\n                                y2: keypoints[12][1],\n                                stroke: color,\n                                \"stroke-width\": \"2\",\n                            });\n                            group.appendChild(line);\n                        }\n                        // left shoulder to left elbow\n                        if (points.has(5) && points.has(7)) {\n                            const color = this.getColor(1);\n                            const line = this.createSVGElement(\"line\", {\n                                x1: keypoints[5][0],\n                                y1: keypoints[5][1],\n                                x2: keypoints[7][0],\n                                y2: keypoints[7][1],\n                                stroke: color,\n                                \"stroke-width\": \"2\",\n                            });\n                            group.appendChild(line);\n                        }\n                        // left elbow to left wrist\n                        if (points.has(7) && points.has(9)) {\n                            const color = this.getColor(1);\n                            const line = this.createSVGElement(\"line\", {\n                                x1: keypoints[7][0],\n                                y1: keypoints[7][1],\n                                x2: keypoints[9][0],\n                                y2: keypoints[9][1],\n                                stroke: color,\n                                \"stroke-width\": \"2\",\n                            });\n                            group.appendChild(line);\n                        }\n                        // right shoulder to right elbow\n                        if (points.has(6) && points.has(8)) {\n                            const color = this.getColor(6);\n                            const line = this.createSVGElement(\"line\", {\n                                x1: keypoints[6][0],\n                                y1: keypoints[6][1],\n                                x2: keypoints[8][0],\n                                y2: keypoints[8][1],\n                                stroke: color,\n                                \"stroke-width\": \"2\",\n                            });\n                            group.appendChild(line);\n                        }\n                        // right elbow to right wrist\n                        if (points.has(8) && points.has(10)) {\n                            const color = this.getColor(1);\n                            const line = this.createSVGElement(\"line\", {\n                                x1: keypoints[8][0],\n                                y1: keypoints[8][1],\n                                x2: keypoints[10][0],\n                                y2: keypoints[10][1],\n                                stroke: color,\n                                \"stroke-width\": \"2\",\n                            });\n                            group.appendChild(line);\n                        }\n                        // left hip to left knee\n                        if (points.has(11) && points.has(13)) {\n                            const color = this.getColor(3);\n                            const line = this.createSVGElement(\"line\", {\n                                x1: keypoints[11][0],\n                                y1: keypoints[11][1],\n                                x2: keypoints[13][0],\n                                y2: keypoints[13][1],\n                                stroke: color,\n                                \"stroke-width\": \"2\",\n                            });\n                            group.appendChild(line);\n                        }\n                        // left knee to left ankle\n                        if (points.has(13) && points.has(15)) {\n                            const color = this.getColor(3);\n                            const line = this.createSVGElement(\"line\", {\n                                x1: keypoints[13][0],\n                                y1: keypoints[13][1],\n                                x2: keypoints[15][0],\n                                y2: keypoints[15][1],\n                                stroke: color,\n                                \"stroke-width\": \"2\",\n                            });\n                            group.appendChild(line);\n                        }\n                        // right hip to right knee\n                        if (points.has(12) && points.has(14)) {\n                            const color = this.getColor(3);\n                            const line = this.createSVGElement(\"line\", {\n                                x1: keypoints[12][0],\n                                y1: keypoints[12][1],\n                                x2: keypoints[14][0],\n                                y2: keypoints[14][1],\n                                stroke: color,\n                                \"stroke-width\": \"2\",\n                            });\n                            group.appendChild(line);\n                        }\n                        // right knee to right ankle\n                        if (points.has(14) && points.has(16)) {\n                            const color = this.getColor(3);\n                            const line = this.createSVGElement(\"line\", {\n                                x1: keypoints[14][0],\n                                y1: keypoints[14][1],\n                                x2: keypoints[16][0],\n                                y2: keypoints[16][1],\n                                stroke: color,\n                                \"stroke-width\": \"2\",\n                            });\n                            group.appendChild(line);\n                        }\n                    }\n\n                    for (let j = 0; j < keypoints.length; j += 1) {\n                        const point = keypoints[j];\n                        const x = point[0];\n                        const y = point[1];\n                        const target = point[3] ? point[3] : j;\n                        // draw if point in the box\n                        if (x > box[0] - box[2] / 2 && x < box[0] + box[2] / 2 && y > box[1] - box[3] / 2 && y < box[1] + box[3] / 2) {\n                            const color = this.getColor(target);\n                            const circle = this.createSVGElement(\"circle\", {\n                                cx: x,\n                                cy: y,\n                                r: 3,\n                                stroke: color,\n                                \"stroke-width\": \"2\",\n                                fill: color,\n                            });\n                            group.appendChild(circle);\n                        }\n                    }\n                });\n            },\n            renderAll() {\n                const container = document.getElementById(this.containerId);\n                const svg = document.getElementById(this.svgId);\n                if (!container || !svg) return;\n\n                let group = document.getElementById(`image-output-group`);\n                if (!group) {\n                    group = this.createSVGElement(\"g\", {\n                        id: `image-output-group`,\n                        transform: \"translate(0, 50)\",\n                    });\n                    svg.appendChild(group);\n                }\n                group.innerHTML = \"\"; // Clear existing content\n\n                const previewData = this.msg?.payload?.data;\n                if (!previewData) {\n                    return;\n                }\n                this.renderImage(svg, group, previewData);\n                this.renderLines(group, previewData);\n                this.renderBoxes(group, previewData);\n                this.renderClasses(group, previewData);\n                this.renderSegments(group, previewData);\n                this.renderKeypoints(group, previewData);\n            },\n        },\n        watch: {\n            msg() {\n                this.renderAll();\n            },\n        },\n    };\n</script>\n",
        "storeOutMessages": true,
        "passthru": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 760,
        "y": 380,
        "wires": [
            []
        ]
    },
    {
        "id": "f40cb9db86bef8a5",
        "type": "function",
        "z": "5924433263ceb70d",
        "name": "send_confidence",
        "func": "const tscore = Number((Number(msg.payload)/100).toFixed(2))\nmsg.payload = {tscore}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 351.4286003112793,
        "y": 280.0000190734863,
        "wires": [
            [
                "968bf19f1a58b202"
            ]
        ]
    },
    {
        "id": "54283c013e16973b",
        "type": "function",
        "z": "5924433263ceb70d",
        "name": "send_iou",
        "func": "const tiou = Number((Number(msg.payload)/100).toFixed(2))\nmsg.payload = {tiou}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 200,
        "wires": [
            [
                "968bf19f1a58b202"
            ]
        ]
    },
    {
        "id": "c0d6cb01240e42a2",
        "type": "ui-text",
        "z": "5924433263ceb70d",
        "group": "37a6e7f9304e351c",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Current Model is: ",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#717171",
        "wrapText": false,
        "className": "",
        "x": 970,
        "y": 320,
        "wires": []
    },
    {
        "id": "7f6c63e058eccb5f",
        "type": "ui-template",
        "z": "5924433263ceb70d",
        "group": "37a6e7f9304e351c",
        "page": "",
        "ui": "",
        "name": "Get Current Model",
        "order": 2,
        "width": "3",
        "height": "1",
        "head": "",
        "format": "<template>\n    <div style=\"display: none\"></div>\n</template>\n\n<script>\n    export default {\n        data() {\n            // define variables available component-wide\n            // (in <template> and component functions)\n            return {\n                name: 0\n            }\n        },\n        watch: {\n            // watch for any changes of \"count\"\n            name: function () {\n                this.send({payload: this.name})\n            }\n        },\n        async mounted() {\n            // const response = await fetch(`http://192.168.42.1/api/deviceMgr/getModelInfo`)\n            const response = await fetch(`http://${window.location.hostname}/api/deviceMgr/getModelInfo`)\n            const data = await response.json()\n            const modelInfo = JSON.parse(data.data.model_info)\n            this.name = modelInfo.model_name\n        },\n    }\n</script>\n<style>\n</style>",
        "storeOutMessages": true,
        "passthru": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 770,
        "y": 320,
        "wires": [
            [
                "c0d6cb01240e42a2"
            ]
        ]
    },
    {
        "id": "44cbf08499fa0e50",
        "type": "comment",
        "z": "5924433263ceb70d",
        "name": "Preview Demo",
        "info": "This is the demo for reCamera Gimbal.\n\nWe created a dashboard for gimbal for users \nto get a idea of how you can use nodes to \ncontrol the gimbal. Feel free to modify\nthe flow at your wish.\n\nJust be mindful that the device does have\nsome CPU limitation.\n\nPrinting out multiple debugs or using multiple\nCAN nodes will result in a high CPU and cause\nthe crash of the device.",
        "x": 133.92860412597656,
        "y": 50.00002479553223,
        "wires": []
    },
    {
        "id": "db8d760bf9e0f487",
        "type": "delay",
        "z": "5924433263ceb70d",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "15",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": false,
        "outputs": 1,
        "x": 560,
        "y": 380,
        "wires": [
            [
                "6b934f208a637406"
            ]
        ]
    },
    {
        "id": "dce4bb179705c28b",
        "type": "function",
        "z": "5924433263ceb70d",
        "name": "get_target_box",
        "func": "const TRACK_TARGETS = {\n    PERSON: 0,\n    CAT: 15,\n    DOG: 16,\n    BOTTLE: 39,\n    CUP: 41,\n    CELLPHONE: 67\n};\nconst trackEnabled = global.get('trackEnabled');\nif (!trackEnabled) {\n    return null;\n}\nlet currentTarget = global.get(\"trackTarget\");\nif (currentTarget === undefined) {\n    currentTarget = TRACK_TARGETS.PERSON\n}\n\n// check current topic and payload\nconst topic = msg.topic;\nconst payload = msg.payload;\n\n// get all the boxes\nlet boxes = payload.data?.boxes;\n\n// check if all boxes and not null\nif (!boxes || boxes.length === 0) {\n    payload.selectedBox = false; // if no boxes detected，set selectedBox to false\n    return msg;\n}\n// filtered out the desired detecting object with options\nlet filteredBoxes = boxes.filter(box => box[5] === parseInt(currentTarget)); // box[5] is the class ID\n\nif (filteredBoxes.length === 0) {\n    payload.selectedBox = false; \n    return msg;\n}\n\n// Calculate box area and select max box\nlet maxAreaBox = filteredBoxes.reduce((maxBox, currentBox) => {\n    // calculate current box area\n    let currentArea = currentBox[2] * currentBox[3]; // box[2] is width，box[3] is height\n    let maxArea = maxBox[2] * maxBox[3]; // maxBox's area\n\n    return currentArea > maxArea ? currentBox : maxBox; // comparison area\n}, filteredBoxes[0]);\n\n// parse info for after process in the next node\nmsg.payload.selectedBox = maxAreaBox;\n\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 460,
        "wires": [
            [
                "77f7fb1af5e3bb02"
            ]
        ]
    },
    {
        "id": "19a3ce9968f1d35a",
        "type": "delay",
        "z": "5924433263ceb70d",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "5",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": false,
        "outputs": 1,
        "x": 330,
        "y": 460,
        "wires": [
            [
                "dce4bb179705c28b"
            ]
        ]
    },
    {
        "id": "16faeb961ec1bf39",
        "type": "ui-button-group",
        "z": "5924433263ceb70d",
        "name": "Track Enable",
        "group": "c5fbe89b47b4f853",
        "order": 6,
        "width": "0",
        "height": "0",
        "label": "Target Track Enable",
        "className": "",
        "rounded": true,
        "useThemeColors": false,
        "passthru": false,
        "options": [
            {
                "label": "Start Tracking",
                "icon": "",
                "value": "true",
                "valueType": "bool",
                "color": "#009933"
            },
            {
                "label": "Stop Tracking",
                "icon": "",
                "value": "false",
                "valueType": "bool",
                "color": "#999999"
            }
        ],
        "topic": "topic",
        "topicType": "msg",
        "x": 370,
        "y": 620,
        "wires": [
            [
                "95d8a68a011bdc6c"
            ]
        ]
    },
    {
        "id": "eda0c03f08759525",
        "type": "ui-dropdown",
        "z": "5924433263ceb70d",
        "group": "c5fbe89b47b4f853",
        "name": "Track Target",
        "label": "Track Object Option:",
        "tooltip": "",
        "order": 7,
        "width": 0,
        "height": 0,
        "passthru": false,
        "multiple": false,
        "chips": false,
        "clearable": false,
        "options": [
            {
                "label": "Person",
                "value": 0,
                "type": "num"
            },
            {
                "label": "Cat",
                "value": 15,
                "type": "num"
            },
            {
                "label": "Dog",
                "value": 16,
                "type": "num"
            },
            {
                "label": "Bottle",
                "value": "39",
                "type": "str"
            },
            {
                "label": "Cup",
                "value": 41,
                "type": "num"
            },
            {
                "label": "Cell Phone",
                "value": 67,
                "type": "num"
            }
        ],
        "payload": "",
        "topic": "topic",
        "topicType": "msg",
        "className": "",
        "typeIsComboBox": true,
        "msgTrigger": "onChange",
        "x": 130,
        "y": 620,
        "wires": [
            [
                "b5f7115f8da75f5a"
            ]
        ]
    },
    {
        "id": "b5f7115f8da75f5a",
        "type": "function",
        "z": "5924433263ceb70d",
        "name": "save_track_target",
        "func": "global.set(\"trackTarget\", msg.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 150,
        "y": 700,
        "wires": [
            []
        ]
    },
    {
        "id": "4f05d0e436acc7c0",
        "type": "ui-text",
        "z": "5924433263ceb70d",
        "group": "c5fbe89b47b4f853",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "Manual Control",
        "label": "Manual Control",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#717171",
        "wrapText": false,
        "className": "",
        "x": 140,
        "y": 920,
        "wires": []
    },
    {
        "id": "cf76f4d691c14470",
        "type": "ui-text",
        "z": "5924433263ceb70d",
        "group": "c5fbe89b47b4f853",
        "order": 8,
        "width": 0,
        "height": 0,
        "name": "Shortcut Button",
        "label": "Shortcut Button",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#717171",
        "wrapText": false,
        "className": "",
        "x": 840,
        "y": 920,
        "wires": []
    },
    {
        "id": "c8d1127a5f52ba11",
        "type": "subflow:22d80629fd354a7c",
        "z": "5924433263ceb70d",
        "name": "",
        "x": 350,
        "y": 1520,
        "wires": []
    },
    {
        "id": "082ed11c01eb9001",
        "type": "subflow:f7d5cf3810421cf3",
        "z": "5924433263ceb70d",
        "name": "",
        "x": 130,
        "y": 1520,
        "wires": []
    },
    {
        "id": "e0c3e26dcba0a1d0",
        "type": "ui-button",
        "z": "5924433263ceb70d",
        "group": "c5fbe89b47b4f853",
        "name": "Sleep",
        "label": "Sleep",
        "order": 9,
        "width": "2",
        "height": "1",
        "emulateClick": false,
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "iconPosition": "left",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "buttonColor": "",
        "textColor": "",
        "iconColor": "",
        "enableClick": true,
        "enablePointerdown": false,
        "pointerdownPayload": "",
        "pointerdownPayloadType": "str",
        "enablePointerup": false,
        "pointerupPayload": "",
        "pointerupPayloadType": "str",
        "x": 810,
        "y": 980,
        "wires": [
            [
                "c3a9da7d7a5a2746",
                "45d7334c4a7d3a34"
            ]
        ]
    },
    {
        "id": "c3a9da7d7a5a2746",
        "type": "function",
        "z": "5924433263ceb70d",
        "name": "sleep_angle",
        "func": "msg.payload = {\n    yaw_angle: 180,\n    pitch_angle: 175\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 980,
        "wires": [
            [
                "991e22b67a81b078",
                "e87995bc13f50329"
            ]
        ]
    },
    {
        "id": "1528e53340ceac14",
        "type": "ui-slider",
        "z": "5924433263ceb70d",
        "group": "c5fbe89b47b4f853",
        "name": "Yaw",
        "label": "Yaw Absolute Angle",
        "tooltip": "",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": true,
        "outs": "all",
        "topic": "yaw",
        "topicType": "msg",
        "thumbLabel": "true",
        "showTicks": "true",
        "min": "1",
        "max": "355",
        "step": 1,
        "className": "",
        "iconPrepend": "",
        "iconAppend": "",
        "color": "",
        "colorTrack": "",
        "colorThumb": "",
        "showTextField": true,
        "x": 110,
        "y": 980,
        "wires": [
            [
                "a646cd3459196008",
                "45d7334c4a7d3a34"
            ]
        ]
    },
    {
        "id": "45dd35115125460f",
        "type": "ui-slider",
        "z": "5924433263ceb70d",
        "group": "c5fbe89b47b4f853",
        "name": "Pitch",
        "label": "Pitch Absolute Angle",
        "tooltip": "",
        "order": 4,
        "width": 0,
        "height": 0,
        "passthru": true,
        "outs": "all",
        "topic": "pitch",
        "topicType": "msg",
        "thumbLabel": "true",
        "showTicks": "true",
        "min": "1",
        "max": "180",
        "step": 1,
        "className": "",
        "iconPrepend": "",
        "iconAppend": "",
        "color": "",
        "colorTrack": "",
        "colorThumb": "",
        "showTextField": true,
        "x": 110,
        "y": 1040,
        "wires": [
            [
                "91f5df07f39d7f9c",
                "45d7334c4a7d3a34"
            ]
        ]
    },
    {
        "id": "141a718c4aca75ea",
        "type": "ui-slider",
        "z": "5924433263ceb70d",
        "group": "c5fbe89b47b4f853",
        "name": "Speed",
        "label": "Motors Speed",
        "tooltip": "",
        "order": 5,
        "width": 0,
        "height": 0,
        "passthru": true,
        "outs": "all",
        "topic": "speed",
        "topicType": "msg",
        "thumbLabel": "true",
        "showTicks": "true",
        "min": "1",
        "max": "360",
        "step": 1,
        "className": "",
        "iconPrepend": "",
        "iconAppend": "",
        "color": "",
        "colorTrack": "",
        "colorThumb": "",
        "showTextField": false,
        "x": 110,
        "y": 1100,
        "wires": [
            [
                "88b1ceb3c6ddfd23",
                "30d2fe6d5fa334fa",
                "45d7334c4a7d3a34"
            ]
        ]
    },
    {
        "id": "61d4f5fd8e5ad959",
        "type": "can-write",
        "z": "5924433263ceb70d",
        "name": "",
        "client": "1c58e9752c4bdfcb",
        "x": 1160,
        "y": 460,
        "wires": []
    },
    {
        "id": "1dca133b04f8d0db",
        "type": "can-write",
        "z": "5924433263ceb70d",
        "name": "",
        "client": "1c58e9752c4bdfcb",
        "x": 1500,
        "y": 1040,
        "wires": []
    },
    {
        "id": "dd117be66b38f9b0",
        "type": "can-write",
        "z": "5924433263ceb70d",
        "name": "",
        "client": "1c58e9752c4bdfcb",
        "x": 640,
        "y": 1020,
        "wires": []
    },
    {
        "id": "a646cd3459196008",
        "type": "motor-config",
        "z": "5924433263ceb70d",
        "name": "Set Yaw Angle",
        "input": "payload",
        "input-type": "msg",
        "output": "0",
        "outputs": 1,
        "x": 460,
        "y": 980,
        "wires": [
            [
                "dd117be66b38f9b0"
            ]
        ]
    },
    {
        "id": "91f5df07f39d7f9c",
        "type": "motor-config",
        "z": "5924433263ceb70d",
        "name": "Set Pitch Angle",
        "input": "payload",
        "input-type": "msg",
        "output": "2",
        "outputs": 1,
        "x": 460,
        "y": 1040,
        "wires": [
            [
                "dd117be66b38f9b0"
            ]
        ]
    },
    {
        "id": "88b1ceb3c6ddfd23",
        "type": "motor-config",
        "z": "5924433263ceb70d",
        "name": "Set Yaw Speed",
        "input": "payload",
        "input-type": "msg",
        "output": "1",
        "outputs": 0,
        "x": 460,
        "y": 1100,
        "wires": []
    },
    {
        "id": "30d2fe6d5fa334fa",
        "type": "motor-config",
        "z": "5924433263ceb70d",
        "name": "Set Pitch Speed",
        "input": "payload",
        "input-type": "msg",
        "output": "3",
        "outputs": 0,
        "x": 460,
        "y": 1160,
        "wires": []
    },
    {
        "id": "991e22b67a81b078",
        "type": "motor-config",
        "z": "5924433263ceb70d",
        "name": "Set Yaw Angle",
        "input": "payload.yaw_angle",
        "input-type": "msg",
        "output": "0",
        "outputs": 1,
        "x": 1300,
        "y": 1000,
        "wires": [
            [
                "1dca133b04f8d0db"
            ]
        ]
    },
    {
        "id": "e87995bc13f50329",
        "type": "motor-config",
        "z": "5924433263ceb70d",
        "name": "Set Pitch Angle",
        "input": "payload.pitch_angle",
        "input-type": "msg",
        "output": "2",
        "outputs": 1,
        "x": 1300,
        "y": 1060,
        "wires": [
            [
                "1dca133b04f8d0db"
            ]
        ]
    },
    {
        "id": "8ed9939e194a81f1",
        "type": "motor-config",
        "z": "5924433263ceb70d",
        "name": "Set Yaw Angle",
        "input": "payload.yaw_angle",
        "input-type": "msg",
        "output": "0",
        "outputs": 1,
        "x": 960,
        "y": 460,
        "wires": [
            [
                "61d4f5fd8e5ad959"
            ]
        ]
    },
    {
        "id": "616e214469932ff9",
        "type": "motor-config",
        "z": "5924433263ceb70d",
        "name": "Set Yaw Speed",
        "input": "payload.yaw_speed",
        "input-type": "msg",
        "output": "1",
        "outputs": 0,
        "x": 960,
        "y": 580,
        "wires": []
    },
    {
        "id": "eff04f88aa68f420",
        "type": "motor-config",
        "z": "5924433263ceb70d",
        "name": "Set Pitch Angle",
        "input": "payload.pitch_angle",
        "input-type": "msg",
        "output": "2",
        "outputs": 1,
        "x": 960,
        "y": 520,
        "wires": [
            [
                "61d4f5fd8e5ad959"
            ]
        ]
    },
    {
        "id": "ba920d03ad796891",
        "type": "motor-config",
        "z": "5924433263ceb70d",
        "name": "Set Pitch Speed",
        "input": "payload.pitch_speed",
        "input-type": "msg",
        "output": "3",
        "outputs": 0,
        "x": 960,
        "y": 640,
        "wires": []
    },
    {
        "id": "030f888e2b794a0f",
        "type": "ui-button",
        "z": "5924433263ceb70d",
        "group": "c5fbe89b47b4f853",
        "name": "Standby",
        "label": "Standby",
        "order": 10,
        "width": "2",
        "height": "1",
        "emulateClick": false,
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "iconPosition": "left",
        "payload": "1_180_90+2_90_90",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "buttonColor": "",
        "textColor": "",
        "iconColor": "",
        "enableClick": true,
        "enablePointerdown": false,
        "pointerdownPayload": "",
        "pointerdownPayloadType": "str",
        "enablePointerup": false,
        "pointerupPayload": "",
        "pointerupPayloadType": "str",
        "x": 820,
        "y": 1080,
        "wires": [
            [
                "016abb5e9eec282c",
                "45d7334c4a7d3a34"
            ]
        ]
    },
    {
        "id": "016abb5e9eec282c",
        "type": "function",
        "z": "5924433263ceb70d",
        "name": "standby_angle",
        "func": "msg.payload = {\n    yaw_angle: 180,\n    pitch_angle: 90\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1040,
        "y": 1080,
        "wires": [
            [
                "991e22b67a81b078",
                "e87995bc13f50329"
            ]
        ]
    },
    {
        "id": "42c6325966560571",
        "type": "ui-template",
        "z": "5924433263ceb70d",
        "group": "c5fbe89b47b4f853",
        "page": "",
        "ui": "",
        "name": "joystick",
        "order": 2,
        "width": "0",
        "height": "0",
        "head": "",
        "format": "<template>\n  <div>\n    <div id=\"joystick-container\" class=\"joystick-container\" />\n  </div>\n</template>\n\n<script>\n  export default {\n  name: 'JoystickControl',\n  \n  data() {\n    return {\n      // 电机角度范围常量\n      YAW_MIN_ANGLE: 0,\n      YAW_MAX_ANGLE: 355,\n      YAW_MID_ANGLE: 177.5,\n      PITCH_MIN_ANGLE: 0,\n      PITCH_MAX_ANGLE: 175,\n      PITCH_MID_ANGLE: 87.5,\n      // 速度相关常量\n      MAX_DISTANCE: 48,\n      MAX_SPEED: 90,\n      // 节流时间间隔（毫秒）\n      THROTTLE_INTERVAL: 100,  // 1秒10次 = 100ms间隔\n      lastSendTime: 0\n    }\n  },\n\n  mounted() {\n    this.loadNippleJS();\n  },\n\n  methods: {\n    loadNippleJS() {\n      const script = document.createElement('script');\n      script.src = 'https://cdn.jsdelivr.net/npm/nipplejs@0.9.0/dist/nipplejs.min.js';\n      script.onload = this.initializeJoystick;\n      document.head.appendChild(script);\n    },\n\n    initializeJoystick() {\n      const joystickContainer = document.getElementById('joystick-container');\n      if (!joystickContainer) return;\n\n      const joystick = nipplejs.create({\n        zone: joystickContainer,\n        mode: 'static',\n        position: { left: '50%', top: '50%' },\n        color: 'green',\n        size: 96\n      });\n\n      joystick.on('move', this.throttledMove);\n    },\n\n    clampAngle(angle, minAngle, maxAngle) {\n      return Math.max(minAngle, Math.min(maxAngle, angle));\n    },\n\n    calculateSpeed(distance) {\n      const speedRatio = Math.min(distance / this.MAX_DISTANCE, 1);\n      return Math.round(speedRatio * this.MAX_SPEED);\n    },\n\n    calculateAngles(vector) {\n      return {\n        yaw: Math.round(this.YAW_MID_ANGLE + (vector.x * this.YAW_MID_ANGLE)),\n        pitch: Math.round(this.PITCH_MID_ANGLE + (-vector.y * this.PITCH_MID_ANGLE))\n      };\n    },\n\n    // 节流函数\n    throttledMove(evt, data) {\n      const now = Date.now();\n      if (now - this.lastSendTime >= this.THROTTLE_INTERVAL) {\n        this.handleMove(evt, data);\n        this.lastSendTime = now;\n      }\n    },\n\n    handleMove(evt, data) {\n      if (!data?.vector) return;\n\n      const angles = this.calculateAngles(data.vector);\n      const speed = this.calculateSpeed(data.distance || 0);\n      console.log(angles,speed)\n      this.send({\n        payload: {\n          yaw_angle: this.clampAngle(angles.yaw, this.YAW_MIN_ANGLE, this.YAW_MAX_ANGLE),\n          pitch_angle: this.clampAngle(angles.pitch, this.PITCH_MIN_ANGLE, this.PITCH_MAX_ANGLE),\n          yaw_speed: speed,\n          pitch_speed: speed\n        }\n      });\n    }\n  }\n};\n</script>\n\n<style scoped>\n  .joystick-container {\n    width: 100px;\n    height: 100px;\n    position: relative;\n    margin: auto;\n    border: 0px solid #0094CE;\n    background-color: #ffffff;\n  }\n</style>",
        "storeOutMessages": true,
        "passthru": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 120,
        "y": 1300,
        "wires": [
            [
                "614bfa4961c5c326",
                "6eeacf15b570e832",
                "463d3b9d4fcf1b9e",
                "9c39149589ecd239",
                "45d7334c4a7d3a34",
                "07c3fd04801eae01"
            ]
        ]
    },
    {
        "id": "a9be4cfdc49cf45a",
        "type": "can-write",
        "z": "5924433263ceb70d",
        "name": "",
        "client": "1c58e9752c4bdfcb",
        "x": 640,
        "y": 1240,
        "wires": []
    },
    {
        "id": "614bfa4961c5c326",
        "type": "motor-config",
        "z": "5924433263ceb70d",
        "name": "Set Yaw Angle",
        "input": "payload.yaw_angle",
        "input-type": "msg",
        "output": "0",
        "outputs": 1,
        "x": 460,
        "y": 1220,
        "wires": [
            [
                "a9be4cfdc49cf45a"
            ]
        ]
    },
    {
        "id": "463d3b9d4fcf1b9e",
        "type": "motor-config",
        "z": "5924433263ceb70d",
        "name": "Set Yaw Speed",
        "input": "payload.yaw_speed",
        "input-type": "msg",
        "output": "1",
        "outputs": 0,
        "x": 460,
        "y": 1340,
        "wires": []
    },
    {
        "id": "6eeacf15b570e832",
        "type": "motor-config",
        "z": "5924433263ceb70d",
        "name": "Set Pitch Angle",
        "input": "payload.pitch_angle",
        "input-type": "msg",
        "output": "2",
        "outputs": 1,
        "x": 460,
        "y": 1280,
        "wires": [
            [
                "a9be4cfdc49cf45a"
            ]
        ]
    },
    {
        "id": "9c39149589ecd239",
        "type": "motor-config",
        "z": "5924433263ceb70d",
        "name": "Set Pitch Speed",
        "input": "payload.pitch_speed",
        "input-type": "msg",
        "output": "3",
        "outputs": 0,
        "x": 460,
        "y": 1400,
        "wires": []
    },
    {
        "id": "95d8a68a011bdc6c",
        "type": "function",
        "z": "5924433263ceb70d",
        "name": "save_track_enabled",
        "func": "global.set('trackEnabled', msg.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 700,
        "wires": [
            []
        ]
    },
    {
        "id": "662618524569fbc6",
        "type": "function",
        "z": "5924433263ceb70d",
        "name": "get_track_enabled",
        "func": "let trackEnabled = global.get('trackEnabled') ? true : false;\nglobal.set(\"trackEnabled\", trackEnabled);\nmsg.payload = trackEnabled;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 540,
        "wires": [
            [
                "16faeb961ec1bf39"
            ]
        ]
    },
    {
        "id": "20b650629e914eea",
        "type": "function",
        "z": "5924433263ceb70d",
        "name": "get_track_target",
        "func": "let trackTarget = global.get('trackTarget')\nconst TRACK_TARGETS = {\n    PERSON: 0,\n    CAT: 15,\n    DOG: 16,\n    BOTTLE: 39,\n    CUP: 41,\n    CELLPHONE: 67\n};\n\nif (trackTarget === undefined) {\n    trackTarget = TRACK_TARGETS.PERSON\n    global.set(\"trackTarget\", trackTarget);\n}\nmsg.payload = trackTarget;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 140,
        "y": 540,
        "wires": [
            [
                "eda0c03f08759525"
            ]
        ]
    },
    {
        "id": "3abd7a7f8c64fdaf",
        "type": "function",
        "z": "5924433263ceb70d",
        "name": "init_state",
        "func": "let initState = global.get('initState')\nif (!initState) {\n    global.set(\"initState\", true);\n    return msg;\n}\nreturn null;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 120,
        "y": 460,
        "wires": [
            [
                "20b650629e914eea",
                "662618524569fbc6"
            ]
        ]
    },
    {
        "id": "77f7fb1af5e3bb02",
        "type": "function",
        "z": "5924433263ceb70d",
        "name": "control_motor",
        "func": "\nconst THROTTLE_INTERVAL = 80; //Minimum sending interval (ms)\n\n// Get last send time from context\nlet lastSendTime = context.get('lastSendTime') || 0;\n\n// Get selected bounding box\nlet selectedBox = msg.payload.selectedBox;\nif (selectedBox === false) {\n    return null;\n}\n\n// Constant definitions\nconst IMAGE_CENTER_X = 320;\nconst IMAGE_CENTER_Y = 321;\nconst SPEED_CONFIG = {\n    MAX_SPEED: 20,\n    MIN_SPEED: 1,\n    MAX_ERROR: 320\n};\n\n// Calculate center point error of the target box\nconst boxCenterX = selectedBox[0];\nconst boxCenterY = selectedBox[1];\nconst errorX = boxCenterX - IMAGE_CENTER_X;\nconst errorY = boxCenterY - IMAGE_CENTER_Y;\n\nconst calculateSpeed = (error) => {\n    const { MAX_SPEED, MIN_SPEED, MAX_ERROR } = SPEED_CONFIG;\n\n    // Use square function to reduce speed when error is small\n    let speed = Math.round((Math.pow(Math.abs(error), 2) / Math.pow(MAX_ERROR, 2)) * (MAX_SPEED - MIN_SPEED)) + MIN_SPEED;\n    \n    // Clamp speed between MIN_SPEED and MAX_SPEED\n    return Math.min(Math.max(speed, MIN_SPEED), MAX_SPEED);\n};\n\n// Generate control command\nconst generateControl = () => {\n    const speedX = calculateSpeed(errorX);\n    const speedY = calculateSpeed(errorY);\n\n    // Calculate yaw angle\n    let yaw_angle;\n    if (errorX < -8) {\n        //if object is on the left, gimbal needs to go right\n        yaw_angle = 260;\n    } else if (errorX > 8) {\n        //if object is on the right, gimbal needs to go left\n        yaw_angle = 80;\n    } else {\n        //gimbal remains in the middle\n        yaw_angle = 180;\n    }\n\n    // Calculate pitch angle\n    let pitch_angle;\n    if (speedY < -3) {\n        //if object is on the top, gimbal needs to go up\n        pitch_angle = 10;\n    } else if (speedY > 3) {\n        //if object is on the botttom, gimbal needs to go down\n        pitch_angle = 170;\n    } else {\n        //gimbal remains in the middle\n        pitch_angle = 90;\n    }\n    //this is a really rought example just to demonstrate the effect,\n    //you can use better tracking algorithm to play with gimbal.\n\n    return {\n        yaw_angle,\n        yaw_speed: speedX,\n        pitch_angle,\n        pitch_speed: speedY\n    };\n};\n\n// Check if ready to send\nconst now = Date.now();\nif (now - lastSendTime >= THROTTLE_INTERVAL) {\n    // Update send timestamp\n    context.set('lastSendTime', now);\n    \n    // Generate and send control command\n    const control = generateControl();\n    return { payload: control };\n} else {\n    // Command dropped due to throttle interval\n    node.warn(`Command dropped, time since last send: ${now - lastSendTime}ms`);\n    return null;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 460,
        "wires": [
            [
                "8ed9939e194a81f1",
                "eff04f88aa68f420",
                "616e214469932ff9",
                "ba920d03ad796891"
            ]
        ]
    },
    {
        "id": "26a31406213e5e42",
        "type": "camera",
        "z": "5924433263ceb70d",
        "option": 0,
        "client": "b97fc673d9180980",
        "audio": true,
        "volume": 80,
        "x": 120,
        "y": 380,
        "wires": [
            [
                "3abd7a7f8c64fdaf",
                "968bf19f1a58b202"
            ]
        ]
    },
    {
        "id": "968bf19f1a58b202",
        "type": "model",
        "z": "5924433263ceb70d",
        "name": "",
        "uri": "",
        "model": "YOLO11n Detection",
        "tscore": 0.45,
        "tiou": 0.25,
        "debug": true,
        "trace": false,
        "counting": false,
        "classes": "person,bicycle,car,motorcycle,airplane,bus,train,truck,boat,traffic light,fire hydrant,stop sign,parking meter,bench,bird,cat,dog,horse,sheep,cow,elephant,bear,zebra,giraffe,backpack,umbrella,handbag,tie,suitcase,frisbee,skis,snowboard,sports ball,kite,baseball bat,baseball glove,skateboard,surfboard,tennis racket,bottle,wine glass,cup,fork,knife,spoon,bowl,banana,apple,sandwich,orange,broccoli,carrot,hot dog,pizza,donut,cake,chair,couch,potted plant,bed,dining table,toilet,tv,laptop,mouse,remote,keyboard,cell phone,microwave,oven,toaster,sink,refrigerator,book,clock,vase,scissors,teddy bear,hair drier,toothbrush",
        "splitter": "0,0,0,0",
        "client": "b97fc673d9180980",
        "x": 310,
        "y": 380,
        "wires": [
            [
                "db8d760bf9e0f487",
                "19a3ce9968f1d35a"
            ]
        ]
    },
    {
        "id": "45d7334c4a7d3a34",
        "type": "function",
        "z": "5924433263ceb70d",
        "name": "Disable Auto Tracking",
        "func": "//When manually controlling gimbal, de-select auto tracking.\n\nglobal.set('trackDisabled', false);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 760,
        "wires": [
            [
                "16faeb961ec1bf39"
            ]
        ]
    },
    {
        "id": "d3aabadf0a0895f8",
        "type": "comment",
        "z": "5924433263ceb70d",
        "name": "Model Settings",
        "info": "This are the Confidence and IoU settings\nsliders of the computer vision model.",
        "x": 140,
        "y": 160,
        "wires": []
    },
    {
        "id": "bf457c2e1d6dca2e",
        "type": "comment",
        "z": "5924433263ceb70d",
        "name": "Auto tracking with Detection",
        "info": "This part is in charge of the auto tracking\nwith the detection.\n\nUsing the output box width and height to get\nthe center of the detection object, then\nask gimbal to move accordingly.",
        "x": 620,
        "y": 540,
        "wires": []
    },
    {
        "id": "632a599256a63d19",
        "type": "comment",
        "z": "5924433263ceb70d",
        "name": "Manual Control",
        "info": "This part demonstrates an example of using\nslider widget to control the gimbal.\n\nPlease noted once manually control the gimbal,\nthe auto tracking will stop.",
        "x": 140,
        "y": 880,
        "wires": []
    },
    {
        "id": "363d2cc3188a0542",
        "type": "comment",
        "z": "5924433263ceb70d",
        "name": "Short cut move",
        "info": "This part demonstrates an example of using\nbuttons to control the gimbal movement.\n\nStandby means the angle position is\n(180,90) to locate in the middle.\n\nPlease noted once manually control the gimbal,\nthe auto tracking will stop.",
        "x": 840,
        "y": 880,
        "wires": []
    },
    {
        "id": "07c3fd04801eae01",
        "type": "function",
        "z": "5924433263ceb70d",
        "name": "Sync Joystick with Slider",
        "func": "// 获取 Joystick 的输出值\nconst yawAngle = msg.payload.yaw_angle;\nconst pitchAngle = msg.payload.pitch_angle;\nconst speed = msg.payload.yaw_speed;\n\n// 创建三个消息对象，分别对应 Yaw、Pitch 和 Speed Slider\nconst yawMsg = { topic: \"yaw\", payload: yawAngle };\nconst pitchMsg = { topic: \"pitch\", payload: pitchAngle };\nconst speedMsg = { topic: \"speed\", payload: speed };\n\n// 返回多个消息对象\nreturn [yawMsg, pitchMsg, speedMsg];",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 170,
        "y": 1220,
        "wires": [
            [
                "141a718c4aca75ea",
                "45dd35115125460f",
                "1528e53340ceac14"
            ]
        ]
    },
    {
        "id": "a8516ce533be8ea5",
        "type": "comment",
        "z": "5924433263ceb70d",
        "name": "Can delete if no needs",
        "info": "This is the basic webs of reCamera gimbal\nsuch as Wi-Fi, ssh, or terminal.\n\nYou can delete this two subflows if you \ndo not need them to show in the dashboard.",
        "x": 160,
        "y": 1480,
        "wires": []
    }
]